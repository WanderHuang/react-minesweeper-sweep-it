{"version":3,"sources":["store/types.js","constant/index.js","util/index.js","store/reducers/matrix/index.js","store/reducers/level/index.js","store/reducers/status/index.js","store/reducers/mine/index.js","store/reducers/clock/index.js","store/reducers/animation/index.js","store/reducers/index.js","components/Emoji/index.js","store/actions/index.js","components/Cell/helper.js","components/Cell/CellFont.js","components/Cell/index.js","components/Row/index.js","components/Matrix/index.js","components/Clock/index.js","components/Info/index.js","components/Board/index.js","App.js","serviceWorker.js","index.js"],"names":["CHANGE_LEVEL","CHANGE_MATRIX","CHANGE_STATUS","INIT_MATRIX","CHANGE_CLOCK_STATUS","CHANGE_ANIMATION_STATUS","mapLevel","baseCount","mineCount","CellTypes","GameStatus","GameLevel","ClockStatus","Emojis","GAME_EASY","content","description","GAME_MEDIUM","GAME_HARD","GAME_SUPER","INFO_LEVEL_CHOICE","INFO_LEVEL","INFO_GAME_STATUS","INFO_GAME_BLOCK","INFO_CLOCK","MONKEY","FLAG","MINE","GAME_FAILED","GAME_PLAYING","GAME_PAUSED","GAME_IDLE","GAME_SUCCESS","NumberColors","Animations","traverseMatrix","matrix","cell","level","rowIndex","colIndex","around","push","mineStatistics","notRevealed","flagged","forEach","row","status","initMatrix","isMine","block","value","initCellValues","mines","x","Math","random","y","findIndex","mine","length","i","initMinesToMatrix","j","createEmptyMatrix","state","action","type","payload","initState","gameStatus","initMine","pow","clockStatus","animationStatus","reducers","combineReducers","Emoji","this","props","title","emoji","css","onClick","className","style","cursor","role","aria-label","React","Component","changeMatrix","types","changeStatus","isSuccess","replaceAllCellStatus","onContextMenu","nextMatrix","JSON","parse","stringify","nextStatus","revealEmptyCell","revealAllCell","isNullCell","CellFont","Number","color","renderColorfulContent","fontWeight","Cell","event","preventDefault","blockRevealed","blockFlagged","_reveal","bind","_flag","renderCellContent","connect","dispatch","Row","map","index","key","Matrix","fontSize","Clock","time","timer","setInterval","setState","clearInterval","forwardRef","Info","refClock","createRef","levelChange","target","restart","current","resetClock","pause","toggleAnimation","renderLevelEmoji","_levelClickEvent","Fragment","renderGameStatus","ref","_toggleAnimation","renderAnimationButtonContent","_pause","renderPauseButtonContent","_restart","animation","Board","App","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e6b25b4.chunk.js","sourcesContent":["// 修改level值\r\nexport const CHANGE_LEVEL = 'CHANGE_LEVEL'\r\n// 修改matrix\r\nexport const CHANGE_MATRIX = 'CHANGE_MATRIX'\r\n// 修改游戏状态\r\nexport const CHANGE_STATUS = 'CHANGE_STATUS'\r\n// 初始化matrix\r\nexport const INIT_MATRIX = 'INIT_MATRIX'\r\n// 切换时钟状态\r\nexport const CHANGE_CLOCK_STATUS = 'CHANGE_CLOCK_STATUS'\r\n// 切换动画状态\r\nexport const CHANGE_ANIMATION_STATUS = 'CHANGE_ANIMATION_STATUS'","/**\r\n * 等级分布\r\n * 0 - easy   - 8 * 8   - 10\r\n * 1 - medium - 12 * 12 - 20\r\n * 2 - hard   - 16 * 16 - 30\r\n * 3 - super  - 20 * 20 - 40\r\n */\r\nexport const mapLevel = [\r\n  {\r\n    // 0.08\r\n    baseCount: 8,\r\n    mineCount: 10\r\n  },\r\n  {\r\n    // 0.11\r\n    baseCount: 15,\r\n    mineCount: 25\r\n  },\r\n  {\r\n    // 0.15\r\n    baseCount: 16,\r\n    mineCount: 40\r\n  },\r\n  {\r\n    // 0.2\r\n    baseCount: 20,\r\n    mineCount: 80\r\n  }\r\n]\r\n/**\r\n * 定义方块状态\r\n * 0 未翻开\r\n * 1 翻开 且为空\r\n * 2 翻开 且为数字\r\n * 3 翻开 且为地雷\r\n * 4 未翻开 且被标记\r\n */\r\nexport const CellTypes = {\r\n  CELL_NOT_REVEAL: 0,\r\n  CELL_NULL: 1,\r\n  CELL_NUMBER: 2,\r\n  CELL_MINE: 3,\r\n  CELL_FLAG: 4\r\n}\r\n\r\n/**\r\n * 定义游戏状态\r\n * 0 未开始\r\n * 1 游戏开始\r\n * 2 游戏暂停\r\n * 3 游戏继续\r\n * 4 游戏失败\r\n * 5 游戏成功\r\n */\r\nexport const GameStatus = {\r\n  GAME_NOT_START: 0,\r\n  GAME_ON: 1,\r\n  GAME_PAUSED: 2,\r\n  GAME_CONTINUED: 3,\r\n  GAME_FAILED: 4,\r\n  GAME_SUCCESS: 5\r\n}\r\n\r\n/**\r\n * 定义游戏等级\r\n * 0 简单\r\n * 1 中级\r\n * 2 困难\r\n * 3 超难\r\n */\r\nexport const GameLevel = {\r\n  SIMPLE: 0,\r\n  MEDIUM: 1,\r\n  HARD: 2,\r\n  SUPER: 3\r\n}\r\n\r\n/**\r\n * 定义时钟状态\r\n * 0 停止\r\n * 1 继续\r\n */\r\nexport const ClockStatus = {\r\n  STOP: 0,\r\n  CONTINUE: 1\r\n}\r\n\r\n/**\r\n * 系统级Emoji定义\r\n */\r\nexport const Emojis = {\r\n  GAME_EASY: {\r\n    content: '😀',\r\n    description: 'Easy'\r\n  },\r\n  GAME_MEDIUM: {\r\n    content: '😃',\r\n    description: 'Medium'\r\n  },\r\n  GAME_HARD: {\r\n    content: '😅',\r\n    description: 'Hard'\r\n  },\r\n  GAME_SUPER: {\r\n    content: '😨',\r\n    description: 'Super'\r\n  },\r\n  INFO_LEVEL_CHOICE: {\r\n    content: '🎲',\r\n    description: 'Level choice'\r\n  },\r\n  INFO_LEVEL: {\r\n    content: '🌡️',\r\n    description: 'Current Level'\r\n  },\r\n  INFO_GAME_STATUS: {\r\n    content: '🕹️',\r\n    description: 'Game Status'\r\n  },\r\n  INFO_GAME_BLOCK: {\r\n    content: '⬛',\r\n    description: 'Blocks'\r\n  },\r\n  INFO_CLOCK: {\r\n    content: '🕒',\r\n    description: 'time(s)'\r\n  },\r\n  MONKEY: {\r\n    content: '🙈',\r\n    description: 'Monkey see nothing'\r\n  },\r\n  FLAG: {\r\n    content: '⛳',\r\n    description: 'Flagged Block'\r\n  },\r\n  MINE: {\r\n    content: '💣',\r\n    description: 'Mine'\r\n  },\r\n  GAME_FAILED: {\r\n    content: '☠️',\r\n    description: 'Game Over'\r\n  },\r\n  GAME_PLAYING: {\r\n    content: '🎮',\r\n    description: 'On Game'\r\n  },\r\n  GAME_PAUSED: {\r\n    content: '⏸️',\r\n    description: 'Paused'\r\n  },\r\n  GAME_IDLE: {\r\n    content: '💤',\r\n    description: 'Idle'\r\n  },\r\n  GAME_SUCCESS: {\r\n    content: '🙌',\r\n    description: 'Game Success'\r\n  }\r\n}\r\n\r\nexport const NumberColors = {\r\n  MINE_0: '#000000',\r\n  MINE_1: '#00CCFF',\r\n  MINE_2: '#00CC33',\r\n  MINE_3: '#FF9966',\r\n  MINE_4: '#0000FF',\r\n  MINE_5: '#9900FF',\r\n  MINE_6: '#CC0099',\r\n  MINE_7: '#000099',\r\n  MINE_8: '#FF0000'\r\n}\r\n\r\n/**\r\n * 定义动画\r\n */\r\nexport const Animations = [\r\n  {\r\n    'backgroundImage': 'linear-gradient(-20deg, #e9defa 0%, #fbfcdb 100%)'\r\n  },\r\n  {\r\n    'animation': 'transition-bg 10s infinite reverse'\r\n  }\r\n]","import { mapLevel, CellTypes } from '../constant'\r\n/**\r\n * 初始化一个空二维数组\r\n * @param { Number } level 当前等级\r\n */\r\nexport const createEmptyMatrix = (level = 0) => {\r\n  const { baseCount } = mapLevel[level];\r\n  const matrix = [];\r\n  for (let i = 0; i < baseCount; i++) {\r\n    const row = []\r\n    for (let j = 0; j < baseCount; j++) {\r\n      row.push({\r\n        rowIndex: i,\r\n        colIndex: j,\r\n        status: CellTypes.CELL_NOT_REVEAL,\r\n        isMine: false,\r\n        value: 0\r\n      })\r\n    }\r\n    matrix.push(row);\r\n  }\r\n  return matrix\r\n}\r\n\r\n/**\r\n * 初始化地雷矩阵\r\n * @param { Array } matrix 游戏矩阵\r\n * @param { Number } level 游戏等级\r\n */\r\nexport const initMinesToMatrix = (matrix, level) => {\r\n  const { baseCount, mineCount } = mapLevel[level];\r\n  const mines = [];\r\n  while(mines.length < mineCount) {\r\n    const x = Math.random() * baseCount | 0;\r\n    const y = Math.random() * baseCount | 0;\r\n    const has = mines.findIndex(mine => mine.x === x && mine.y === y);\r\n    if (has < 0) {\r\n      mines.push({ x, y });\r\n    }\r\n  }\r\n  for (let i = 0; i < mineCount; i++) {\r\n    const { x, y } = mines[i];\r\n    matrix[x][y].isMine = true;\r\n  }\r\n  return matrix\r\n}\r\n\r\n/**\r\n * 给每个单元格赋值\r\n * @param { Array } matrix 游戏矩阵\r\n * @param { number } level 游戏等级\r\n */\r\nexport const initCellValues = (matrix, level) => {\r\n  matrix.forEach((row) => {\r\n    row.forEach((cell) => {\r\n      if (!cell.isMine) {\r\n        const around = traverseMatrix(matrix, cell, level);\r\n        around.forEach((block) => {\r\n          if (block.isMine) {\r\n            cell.value++\r\n          }\r\n        })\r\n      }\r\n    })\r\n  })\r\n  return matrix;\r\n};\r\n\r\n/**\r\n * 遍历一个单元的周围\r\n * @param {*} matrix 游戏矩阵\r\n * @param {*} cell 一个单元\r\n * @param {*} level 游戏等级\r\n */\r\nexport const traverseMatrix = (matrix, cell, level) => {\r\n  const { baseCount } = mapLevel[level]\r\n  const { rowIndex, colIndex } = cell;\r\n  const around = [];\r\n  if (rowIndex > 0) {\r\n    around.push(matrix[rowIndex - 1][colIndex]);\r\n  }\r\n  if (rowIndex < baseCount - 1) {\r\n    around.push(matrix[rowIndex + 1][colIndex]);\r\n  }\r\n  if (colIndex > 0) {\r\n    around.push(matrix[rowIndex][colIndex - 1]);\r\n  }\r\n  if (colIndex < baseCount - 1) {\r\n    around.push(matrix[rowIndex][colIndex + 1]);\r\n  }\r\n  if (rowIndex > 0 && colIndex > 0) {\r\n    around.push(matrix[rowIndex - 1][colIndex - 1]);\r\n  }\r\n  if (rowIndex > 0 && colIndex < baseCount - 1) {\r\n    around.push(matrix[rowIndex - 1][colIndex + 1]);\r\n  }\r\n  if (rowIndex < baseCount - 1 && colIndex < baseCount - 1) {\r\n    around.push(matrix[rowIndex + 1][colIndex + 1]);\r\n  }\r\n  if (rowIndex < baseCount - 1 && colIndex > 0) {\r\n    around.push(matrix[rowIndex + 1][colIndex - 1]);\r\n  }\r\n  return around;\r\n}\r\n\r\n/**\r\n * 地雷状态统计\r\n * @param {Array} matrix 游戏矩阵\r\n */\r\nexport const mineStatistics = (matrix) => {\r\n  let notRevealed = 0\r\n  let flagged = 0\r\n  matrix.forEach((row) => {\r\n    row.forEach((cell) => {\r\n      if (cell.status === CellTypes.CELL_NOT_REVEAL) {\r\n        notRevealed++\r\n      }\r\n      if (cell.status === CellTypes.CELL_FLAG) {\r\n        flagged++\r\n      }\r\n    })\r\n  })\r\n  return {\r\n    notRevealed,\r\n    flagged\r\n  }\r\n}","import { CHANGE_MATRIX, INIT_MATRIX } from '../../types';\r\nimport { createEmptyMatrix, initMinesToMatrix, initCellValues }from '../../../util';\r\nimport { GameLevel } from '../../../constant'\r\n\r\nconst initMatrix = (level) => {\r\n  const empty = createEmptyMatrix(level)\r\n  const withMines = initMinesToMatrix(empty, level);\r\n  const withValues = initCellValues(withMines, level);\r\n  return withValues\r\n}\r\n\r\nconst matrix = (state = initMatrix(GameLevel.MEDIUM), action) => {\r\n  switch(action.type) {\r\n    case CHANGE_MATRIX:\r\n      return action.payload;\r\n    case INIT_MATRIX:\r\n      return initMatrix(action.payload);\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nexport default matrix;","import { CHANGE_LEVEL } from '../../types';\r\nimport { GameLevel } from '../../../constant';\r\n\r\nconst initState = GameLevel.MEDIUM;\r\n\r\nconst level = (state = initState, action) => {\r\n  switch(action.type) {\r\n    case CHANGE_LEVEL: {\r\n      return action.payload;\r\n    }\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nexport default level;","import { CHANGE_STATUS } from '../../types';\r\n\r\nconst initState = 0;\r\n\r\nconst gameStatus = (state = initState, action) => {\r\n  switch(action.type) {\r\n    case CHANGE_STATUS: {\r\n      return action.payload;\r\n    }\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nexport default gameStatus;","import { CHANGE_MATRIX } from '../../types';\r\nimport { mineStatistics } from '../../../util';\r\nimport { mapLevel } from '../../../constant'\r\n\r\nconst initMine = (level) => {\r\n  return {\r\n    notRevealed: Math.pow(mapLevel[level].baseCount, 2),\r\n    flagged: 0\r\n  }\r\n}\r\n\r\nconst mine = (state = initMine(0), action) => {\r\n  switch(action.type) {\r\n    case CHANGE_MATRIX:\r\n      return mineStatistics(action.payload);\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nexport default mine;","import { CHANGE_CLOCK_STATUS } from '../../types';\r\n\r\nconst initState = 0;\r\n\r\nconst clockStatus = (state = initState, action) => {\r\n  switch(action.type) {\r\n    case CHANGE_CLOCK_STATUS: {\r\n      return action.payload;\r\n    }\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nexport default clockStatus;","import { CHANGE_ANIMATION_STATUS } from '../../types';\r\n\r\nconst initState = true;\r\n\r\nconst animationStatus = (state = initState, action) => {\r\n  switch(action.type) {\r\n    case CHANGE_ANIMATION_STATUS: {\r\n      return action.payload;\r\n    }\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nexport default animationStatus;","import { combineReducers } from 'redux'\r\nimport matrix from './matrix'\r\nimport level from './level'\r\nimport gameStatus from './status'\r\nimport mine from './mine'\r\nimport clockStatus from './clock'\r\nimport animationStatus from './animation'\r\n\r\nconst reducers = combineReducers({\r\n  matrix,\r\n  level,\r\n  gameStatus,\r\n  mine,\r\n  clockStatus,\r\n  animationStatus\r\n})\r\n\r\nexport default reducers","import React from 'react';\r\nexport default class Emoji extends React.Component {\r\n  render () {\r\n    let { content, title, emoji, css, onClick } = this.props;\r\n    if (emoji) {\r\n      content = emoji.content\r\n      title = emoji.description\r\n    }\r\n    return (\r\n      <span\r\n        className={\"title \" + css}\r\n        style={{cursor: onClick ? 'pointer': 'default'}}\r\n        role=\"img\"\r\n        aria-label=\"flag\"\r\n        title={ title }\r\n        onClick={ onClick }\r\n      >{ content }</span>\r\n    )\r\n  }\r\n}","import * as types from '../types';\r\nexport function changeLevel (payload) {\r\n  return {\r\n    type: types.CHANGE_LEVEL,\r\n    payload\r\n  }\r\n}\r\nexport function changeMatrix (payload) {\r\n  return {\r\n    type: types.CHANGE_MATRIX,\r\n    payload\r\n  }\r\n}\r\n\r\nexport function initMatrix (payload) {\r\n  return {\r\n    type: types.INIT_MATRIX,\r\n    payload\r\n  }\r\n}\r\n\r\nexport function changeStatus (payload) {\r\n  return {\r\n    type: types.CHANGE_STATUS,\r\n    payload\r\n  }\r\n}\r\n\r\nexport function resetClock (payload) {\r\n  return {\r\n    type: types.CHANGE_CLOCK_STATUS,\r\n    payload\r\n  }\r\n}\r\n\r\nexport function changeAnimationStatus (payload) {\r\n  return {\r\n    type: types.CHANGE_ANIMATION_STATUS,\r\n    payload\r\n  }\r\n}\r\n","import { CellTypes } from '../../constant'\r\nimport { traverseMatrix } from '../../util'\r\n/**\r\n * 判断游戏是否成功\r\n * @param {*} matrix 游戏矩阵\r\n * @param {*} level 游戏等级\r\n */\r\nexport const isSuccess = (matrix) => {\r\n  for (let i = 0; i < matrix.length; i++) {\r\n    for (let j = 0; j < matrix[i].length; j++) {\r\n      if (matrix[i][j].status === CellTypes.CELL_NOT_REVEAL) {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n/**\r\n * 修改单元状态\r\n * @param {*} matrix 游戏矩阵\r\n * @param {*} cell 一个单元\r\n * @param {*} level 游戏等级\r\n * @param {*} onContextMenu 是否右键\r\n */\r\nexport const replaceAllCellStatus = (matrix, cell, level, onContextMenu) => {\r\n  const { rowIndex, colIndex, status, isMine, value } = cell\r\n  const nextMatrix = JSON.parse(JSON.stringify(matrix))\r\n  let nextStatus = status\r\n  if (onContextMenu) {\r\n    switch (status) {\r\n      case CellTypes.CELL_NOT_REVEAL:\r\n        nextStatus = CellTypes.CELL_FLAG;\r\n        break;\r\n      case CellTypes.CELL_FLAG:\r\n        nextStatus = CellTypes.CELL_NOT_REVEAL;\r\n        break;\r\n      default: \r\n        break;\r\n    }\r\n  } else {\r\n    if (status === CellTypes.CELL_NOT_REVEAL) {\r\n      // 空单元\r\n      if (!isMine && value === 0) {\r\n        return revealEmptyCell(nextMatrix, cell, level)\r\n      } else if (isMine) {\r\n        // 地雷\r\n        return revealAllCell(nextMatrix)\r\n      } else {\r\n        // 数字\r\n        nextStatus = CellTypes.CELL_NUMBER;\r\n      }\r\n    }\r\n  }\r\n  nextMatrix[rowIndex][colIndex] = {\r\n    rowIndex,\r\n    colIndex,\r\n    status: nextStatus,\r\n    isMine,\r\n    value\r\n  }\r\n  return nextMatrix\r\n}\r\n\r\nconst isNullCell = (cell) => {\r\n  const { status, value, isMine } = cell\r\n  return status === CellTypes.CELL_NOT_REVEAL && value === 0 && !isMine\r\n}\r\n\r\n/**\r\n * 遍历清除当前周围的空单元\r\n * @param {*} matrix 游戏矩阵\r\n * @param {*} cell 一个单元\r\n * @param {*} level 游戏等级\r\n */\r\nexport const revealEmptyCell = (matrix, cell, level) => {\r\n  const around = traverseMatrix(matrix, cell, level);\r\n  around.forEach((block) => {\r\n    const { status, value } = block;\r\n    if (isNullCell(block)) {\r\n      block.status = CellTypes.CELL_NULL;\r\n      revealEmptyCell(matrix, block, level);\r\n    }\r\n    // if (status === CellTypes.CELL_NOT_REVEAL && value === 0 && !isMine) {\r\n    //   block.status = CellTypes.CELL_NULL;\r\n    //   revealEmptyCell(matrix, block, level);\r\n    // }\r\n    if (status === CellTypes.CELL_NOT_REVEAL && value !== 0) {\r\n      block.status = CellTypes.CELL_NUMBER;\r\n    }\r\n  });\r\n  // This cell may not be the matrix's cell, so should set to matrix\r\n  // fix: one monkey surrounded with numbers that cannot be revealed\r\n  // Recursive Function will check cell repeatly...\r\n  if (isNullCell(cell)) {\r\n    const { rowIndex, colIndex } = cell\r\n    cell.status = CellTypes.CELL_NULL;\r\n    matrix[rowIndex][colIndex].status = CellTypes.CELL_NULL\r\n  }\r\n  return matrix;\r\n}\r\n\r\n/**\r\n * 翻开所有的单元\r\n * @param {*} matrix 游戏矩阵\r\n */\r\nexport const revealAllCell = (matrix) => {\r\n  matrix.forEach((row) => {\r\n    row.forEach((cell) => {\r\n      if (cell.isMine) {\r\n        cell.status = CellTypes.CELL_MINE\r\n      } else if (cell.value > 0) {\r\n        cell.status = CellTypes.CELL_NUMBER\r\n      } else if (cell.value === 0) {\r\n        cell.status = CellTypes.CELL_NULL\r\n      }\r\n    })\r\n  })\r\n  return matrix\r\n}","import React from 'react';\r\nimport { NumberColors } from '../../constant';\r\nexport default class CellFont extends React.Component {\r\n  renderColorfulContent (content, level) {\r\n    if (!level) {\r\n      level = Number(content)\r\n    }\r\n    switch (level) {\r\n      case 0:\r\n        return NumberColors.MINE_0;\r\n      case 1:\r\n        return NumberColors.MINE_1;\r\n      case 2:\r\n        return NumberColors.MINE_2;\r\n      case 3:\r\n        return NumberColors.MINE_3;\r\n      case 4:\r\n        return NumberColors.MINE_4;\r\n      case 5:\r\n        return NumberColors.MINE_5;\r\n      case 6:\r\n        return NumberColors.MINE_6;\r\n      case 7:\r\n        return NumberColors.MINE_7;\r\n      case 8:\r\n        return NumberColors.MINE_8;\r\n      default:\r\n        return NumberColors.MINE_0;\r\n    }\r\n  }\r\n  render () {\r\n    const { content } = this.props;\r\n    return (\r\n      <span style={{color: this.renderColorfulContent(content), fontWeight: 500}}>\r\n        { content }\r\n      </span>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n// 工具\r\nimport { CellTypes, GameStatus } from '../../constant';\r\nimport { changeMatrix, changeStatus } from '../../store/actions';\r\nimport { isSuccess, replaceAllCellStatus } from './helper';\r\nimport { Emojis } from '../../constant';\r\n// 组件\r\nimport Emoji from '../Emoji';\r\nimport CellFont from './CellFont';\r\nclass Cell extends React.Component {\r\n\r\n  renderCellContent (cell) {\r\n    const { status, isMine, value } = cell\r\n    switch (status) {\r\n      case CellTypes.CELL_NOT_REVEAL:\r\n        return (\r\n          <div className=\"block\"></div>\r\n        );\r\n      case CellTypes.CELL_NULL:\r\n        return (\r\n          <div className=\"revealed-block\">\r\n            <Emoji emoji={ Emojis.MONKEY }></Emoji>\r\n          </div>\r\n        );\r\n      case CellTypes.CELL_NUMBER:\r\n        return (\r\n          <div className=\"revealed-block\">\r\n            <CellFont content={ value }/>\r\n          </div>\r\n        );\r\n      case CellTypes.CELL_MINE:\r\n        return (\r\n          <div className=\"revealed-block\">\r\n            {\r\n              isMine ?\r\n              <Emoji emoji={ Emojis.MINE }></Emoji> :\r\n              <Emoji emoji={ Emojis.MONKEY }></Emoji>\r\n            }\r\n          </div>\r\n        );\r\n      case CellTypes.CELL_FLAG:\r\n        return (\r\n          <div className=\"block\">\r\n            <Emoji emoji={ Emojis.FLAG }></Emoji>\r\n          </div>\r\n        );\r\n      default:\r\n        return <div></div>\r\n    }\r\n  }\r\n  // 翻开方块\r\n  _reveal (event) {\r\n    event.preventDefault();\r\n    const { blockRevealed, cell, matrix, level, gameStatus } = this.props;\r\n    blockRevealed(cell, matrix, level, gameStatus);\r\n  }\r\n  // 标记方块\r\n  _flag (event) {\r\n    event.preventDefault();\r\n    const { blockFlagged, cell, matrix, level, gameStatus } = this.props;\r\n    blockFlagged(cell, matrix, level, gameStatus);\r\n  }\r\n\r\n  render () {\r\n    const { cell } = this.props;\r\n    return (\r\n      <div className=\"cell\"\r\n        onClick={ this._reveal.bind(this) } \r\n        onContextMenu={ this._flag.bind(this) }\r\n      >\r\n      {this.renderCellContent(cell)}\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n/* connect Cell到容器中 */\r\n\r\n// 获取所有的状态。映射到props\r\nconst mapStateToProps = (state) => state\r\n\r\n// 处理状态变更的方法。映射到props\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    blockRevealed: (cell, matrix, level, gameStatus) => {\r\n      // 游戏暂停、胜利、失败；或者当前方块被标记的情况下 不响应左击事件\r\n      if (\r\n        gameStatus === GameStatus.GAME_PAUSED ||\r\n        gameStatus === GameStatus.GAME_SUCCESS ||\r\n        gameStatus === GameStatus.GAME_FAILED ||\r\n        cell.status === CellTypes.CELL_FLAG\r\n      ) {\r\n        return\r\n      }\r\n      // 若 戏空闲状态 变更为进行中\r\n      if (gameStatus === GameStatus.GAME_NOT_START) {\r\n        dispatch(changeStatus(GameStatus.GAME_ON));\r\n      }\r\n      // 处理cell状态变更。如果是踩雷，翻开所有的方块\r\n      const nextMatrix = replaceAllCellStatus(matrix, cell, level)\r\n      // 踩雷则游戏结束\r\n      if (cell.isMine) {\r\n        dispatch(changeStatus(GameStatus.GAME_FAILED));\r\n        // 判断游戏是否成功\r\n      } else if (isSuccess(nextMatrix, level)) {\r\n        dispatch(changeStatus(GameStatus.GAME_SUCCESS));\r\n      }\r\n      dispatch(changeMatrix(nextMatrix));\r\n    },\r\n    blockFlagged: (cell, matrix, level, gameStatus) => {\r\n      // 游戏暂停、胜利、失败的情况下 不响应右击事件\r\n      if (\r\n        gameStatus === GameStatus.GAME_PAUSED ||\r\n        gameStatus === GameStatus.GAME_SUCCESS ||\r\n        gameStatus === GameStatus.GAME_FAILED\r\n      ) {\r\n        return\r\n      }\r\n      // 若 戏空闲状态 变更为进行中\r\n      if (gameStatus === GameStatus.GAME_NOT_START) {\r\n        dispatch(changeStatus(GameStatus.GAME_ON));\r\n      }\r\n      // 处理cell状态变更。\r\n      const nextMatrix = replaceAllCellStatus(matrix, cell, level, true)\r\n      // 游戏成功\r\n      if (isSuccess(nextMatrix, level)) {\r\n        dispatch(changeStatus(GameStatus.GAME_SUCCESS));\r\n      }\r\n      dispatch(changeMatrix(nextMatrix));\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cell)\r\n","import React from 'react';\r\nimport Cell from '../Cell';\r\nexport default class Row extends React.Component {\r\n  render () {\r\n    const { row } = this.props;\r\n    return (\r\n      <div className=\"row\">\r\n        {\r\n          row.map((cell, index) => {\r\n            return (\r\n              <Cell cell={ cell } key={ index }></Cell>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Row from '../Row';\r\nclass Matrix extends React.Component {\r\n  render () {\r\n    const { matrix, level } = this.props;\r\n    return (\r\n      <div className=\"matrix\" style={{fontSize: [18, 16, 14, 12][level] + 'px'}}>\r\n        {\r\n          matrix.map((row, index) => {\r\n            return (\r\n              <Row row={ row } key={ index }></Row>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// 从state中映射matrix到Matrix组件\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    matrix: state.matrix,\r\n    level: state.level\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Matrix)\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Emojis, ClockStatus, GameStatus } from '../../constant';\r\n// 组件\r\nimport Emoji from '../Emoji';\r\nclass Clock extends React.Component {\r\n  timer;\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      time: 0\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this.timer = setInterval (() => {\r\n      const { clockStatus } = this.props;\r\n      if (clockStatus === ClockStatus.CONTINUE) {\r\n        this.setState({time: this.state.time + 1})\r\n      }\r\n    }, 1000)\r\n  }\r\n  componentWillUnmount () {\r\n    if (this.timer) {\r\n      clearInterval(this.timer)\r\n    }\r\n  }\r\n\r\n  resetClock(time = 0) {\r\n    this.setState({ time })\r\n  }\r\n\r\n  render () {\r\n    const { time } = this.state;\r\n    return (\r\n      <div className=\"line\">\r\n        <Emoji emoji={ Emojis.INFO_CLOCK }></Emoji>\r\n        <span>{ time } s</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n/* connect */\r\n\r\nconst mapStateToProps = (state) => {\r\n  const status = state.gameStatus\r\n  let clockStatus = 0\r\n  switch (status) {\r\n    case (GameStatus.GAME_CONTINUED):\r\n    case (GameStatus.GAME_ON):\r\n      clockStatus = 1;\r\n      break;\r\n    default:\r\n      clockStatus = 0;\r\n  }\r\n  return { clockStatus }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, null, null, { forwardRef: true })(Clock);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n// 工具\r\nimport { changeLevel, initMatrix, changeStatus, changeAnimationStatus } from '../../store/actions';\r\nimport { mapLevel, GameStatus, Emojis } from '../../constant';\r\n// 组件\r\nimport Emoji from '../Emoji';\r\nimport Clock from '../Clock';\r\n\r\nclass Info extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.refClock = React.createRef();\r\n  }\r\n  // 【等级变更】响应\r\n  _levelChangeEvent (event) {\r\n    event.preventDefault();\r\n    const { levelChange } = this.props;\r\n    levelChange(event);\r\n  }\r\n\r\n  _levelClickEvent (event) {\r\n    event.preventDefault();\r\n    const { level, levelChange } = this.props;\r\n    let value = level + 1\r\n    value = value > 3 ? 0 : value\r\n    levelChange({ target: { value }})\r\n  }\r\n\r\n  // 【重新开始】响应\r\n  _restart (event) {\r\n    event.preventDefault();\r\n    const { level, restart } = this.props;\r\n    restart(level);\r\n    this.refClock.current.resetClock(0);\r\n  }\r\n  // 【暂停】响应\r\n  _pause (event) {\r\n    event.preventDefault();\r\n    const { gameStatus, pause } = this.props;\r\n    pause(gameStatus);\r\n  }\r\n  // 确定是否使用动画\r\n  _toggleAnimation (event) {\r\n    event.preventDefault();\r\n    const { toggleAnimation, animationStatus } = this.props;\r\n    toggleAnimation(animationStatus);\r\n  }\r\n\r\n  // 渲染游戏状态\r\n  renderGameStatus (gameStatus) {\r\n    switch (gameStatus) {\r\n      case GameStatus.GAME_NOT_START:\r\n        return Emojis.GAME_IDLE;\r\n      case GameStatus.GAME_PAUSED:\r\n        return Emojis.GAME_PAUSED;\r\n      case GameStatus.GAME_FAILED:\r\n        return Emojis.GAME_FAILED;\r\n      case GameStatus.GAME_SUCCESS:\r\n        return Emojis.GAME_SUCCESS;\r\n      case GameStatus.GAME_ON:\r\n      case GameStatus.GAME_CONTINUED:\r\n      default:\r\n        return Emojis.GAME_PLAYING;\r\n    }\r\n  }\r\n\r\n  // 渲染按钮文字\r\n  renderPauseButtonContent (status) {\r\n    switch (status) {\r\n      case GameStatus.GAME_PAUSED:\r\n        return 'Continue';\r\n      default:\r\n        return 'Pause';\r\n    }\r\n  }\r\n\r\n  // 渲染背景动画\r\n  renderAnimationButtonContent (status) {\r\n    if (status) {\r\n      return 'Static'\r\n    } else {\r\n      return 'Dynamic'\r\n    }\r\n  }\r\n\r\n  // 渲染等级emoji\r\n  renderLevelEmoji (level) {\r\n    return [Emojis.GAME_EASY, Emojis.GAME_MEDIUM, Emojis.GAME_HARD, Emojis.GAME_SUPER][level];\r\n  }\r\n\r\n  render() {\r\n    const { level, gameStatus, mine, animationStatus } = this.props\r\n    return (\r\n      <div className=\"info\">\r\n        {\r\n          /* \r\n          去除这个select框 用点击emoji代替\r\n          <div className=\"line\">\r\n            <Emoji emoji={ Emojis.INFO_LEVEL_CHOICE }></Emoji>\r\n            <select name=\"levelSelector\" value={level} onChange={ this._levelChangeEvent.bind(this) }>\r\n              <option className=\"option\" value=\"0\">{ Emojis.GAME_EASY.content }</option>\r\n              <option className=\"option\" value=\"1\">{ Emojis.GAME_MEDIUM.content }</option>\r\n              <option className=\"option\" value=\"2\">{ Emojis.GAME_HARD.content }</option>\r\n              <option className=\"option\" value=\"3\">{ Emojis.GAME_SUPER.content }</option>\r\n            </select>\r\n          </div> \r\n          */\r\n        }\r\n        <div className=\"line\">\r\n          <Emoji emoji={ Emojis.INFO_LEVEL }></Emoji>\r\n          <Emoji emoji={ this.renderLevelEmoji(level)} onClick={ this._levelClickEvent.bind(this) } css=\"content-right\"></Emoji>\r\n        </div>\r\n        { \r\n          <React.Fragment>\r\n            <div className=\"line\">\r\n              <Emoji emoji={ Emojis.INFO_GAME_BLOCK }></Emoji>\r\n              <span>{ mine.notRevealed }</span>\r\n            </div>\r\n            <div className=\"line\">\r\n              <Emoji emoji={ Emojis.FLAG }></Emoji>\r\n              <span>{ mine.flagged }</span>\r\n            </div>\r\n            <div className=\"line\">\r\n              <Emoji emoji={ Emojis.MINE }></Emoji>\r\n              <span>{ mapLevel[level].mineCount }</span>\r\n            </div>\r\n          </React.Fragment>\r\n        }\r\n        <div className=\"line\">\r\n          <Emoji emoji={ Emojis.INFO_GAME_STATUS }></Emoji>\r\n          { <Emoji emoji={ this.renderGameStatus(gameStatus) } css=\"content-right\"></Emoji> }\r\n        </div>\r\n        <Clock ref={this.refClock}/>\r\n        <div className=\"line\">\r\n          <button className=\"animation\" onClick={ this._toggleAnimation.bind(this) }>{ this.renderAnimationButtonContent(animationStatus) }</button>\r\n          <button className=\"pause\" onClick={ this._pause.bind(this) }>{ this.renderPauseButtonContent(gameStatus) }</button>\r\n          <button className=\"restart\" onClick={ this._restart.bind(this) }>Restart</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return state\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    levelChange: ({ target }) => {\r\n      const level = Number(target.value)\r\n      // 修改游戏难度\r\n      dispatch(changeLevel(level));\r\n      // 初始化游戏矩阵\r\n      dispatch(initMatrix(level));\r\n      // 修改游戏状态\r\n      dispatch(changeStatus(GameStatus.GAME_NOT_START));\r\n    },\r\n    restart: (level) => {\r\n      // 重置矩阵\r\n      dispatch(initMatrix(level));\r\n      // 重置游戏状态\r\n      dispatch(changeStatus(GameStatus.GAME_ON));\r\n    },\r\n    pause: (gameStatus) => {\r\n      if (gameStatus === GameStatus.GAME_PAUSED) {\r\n        dispatch(changeStatus(GameStatus.GAME_CONTINUED))\r\n      }\r\n      if (\r\n        gameStatus === GameStatus.GAME_CONTINUED ||\r\n        gameStatus === GameStatus.GAME_ON\r\n      ) {\r\n        dispatch(changeStatus(GameStatus.GAME_PAUSED))\r\n      }\r\n    },\r\n    toggleAnimation: (animation) => {\r\n      dispatch(changeAnimationStatus(!animation))\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Info)","import React from 'react';\r\nimport { Emojis } from '../../constant';\r\nimport Emoji from '../Emoji';\r\nimport Matrix from '../Matrix';\r\nimport Info from '../Info';\r\nexport default class Board extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className=\"board\">\r\n        <Info></Info>\r\n        <div className=\"zone\">\r\n          <Matrix></Matrix>\r\n        </div>\r\n        <section>\r\n          <div className=\"line\">\r\n            <span>Description:</span>\r\n          </div>\r\n          <div className=\"line\">\r\n            <span>* </span>\r\n            <span>Click </span>\r\n            <Emoji emoji={ Emojis.GAME_MEDIUM } />\r\n            <span> can change the degree of difficulty</span>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.scss';\r\nimport { Animations } from './constant';\r\nimport Board from './components/Board';\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    const { animationStatus } = this.props;\r\n    const index = animationStatus ? 1 : 0;\r\n    return (\r\n      <div className=\"app\" style={ Animations[index] }>\r\n        <h1>Minesweeper: Sweep it, Bro!</h1>\r\n        <div className=\"boardArea\">\r\n          <Board></Board>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n/* connect */\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    animationStatus: state.animationStatus\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\nimport reducers from './store/reducers';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, applyMiddleware(logger))\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}