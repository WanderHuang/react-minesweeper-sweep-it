{"version":3,"sources":["constant/index.js","util/index.js","store/reducers/matrix/index.js","store/types.js","store/reducers/level/index.js","store/reducers/status/index.js","store/reducers/mine/index.js","store/reducers/clock/index.js","store/reducers/animation/index.js","store/reducers/index.js","store/reducers/media/index.js","store/actions/pure.js","components/Cell/helper.js","components/Emoji/index.js","components/Cell/CellFont.js","components/Cell/index.js","store/actions/async.js","components/Row/index.js","components/Matrix/index.js","components/Clock/index.js","components/Info/index.js","components/Description/index.js","components/Board/index.js","App.js","serviceWorker.js","index.js"],"names":["mapLevel","baseCount","mineCount","CellTypes","GameStatus","GameLevel","ClockStatus","Emojis","GAME_EASY","content","description","GAME_MEDIUM","GAME_HARD","GAME_SUPER","INFO_LEVEL_CHOICE","INFO_LEVEL","INFO_GAME_STATUS","INFO_GAME_BLOCK","INFO_CLOCK","MONKEY","FLAG","MINE","GAME_FAILED","GAME_PLAYING","GAME_PAUSED","GAME_IDLE","GAME_SUCCESS","INFO_COW","INFO_BEAR","INFO_NUMBER","NumberColors","Animations","createEmptyMatrix","level","matrix","i","row","j","push","rowIndex","colIndex","status","isMine","value","traverseMatrix","cell","around","mineStatistics","notRevealed","flagged","forEach","failedMediaFrame","currentRowIndex","currentColIndex","isPositive","isNextLine","len","length","cacheStatus","isEmoji","emoji","JSON","parse","stringify","successMediaFrame","number","initMatrix","block","initCellValues","mines","x","Math","random","y","findIndex","mine","initMinesToMatrix","state","action","type","payload","initState","gameStatus","initMine","pow","clockStatus","animationStatus","reducers","combineReducers","mediaMatrix","mediaTimer","changeMatrix","changeStatus","changeMediaMatrix","changeMediaTimer","isSuccess","replaceAllCellStatus","onContextMenu","nextMatrix","nextStatus","revealEmptyCell","revealAllCell","isNullCell","Emoji","this","props","title","css","onClick","cursor","className","style","role","aria-label","React","Component","CellFont","Number","color","renderColorfulContent","fontWeight","Cell","event","preventDefault","blockRevealed","blockFlagged","_reveal","bind","_flag","renderCellContent","connect","dispatch","time","prev","timer","setInterval","runFailedMedia","runSuccessMedia","Row","map","index","key","Matrix","fontSize","Clock","setState","clearInterval","forwardRef","Info","refClock","createRef","levelChange","target","restart","current","resetClock","pause","toggleAnimation","renderLevelEmoji","_levelClickEvent","Fragment","renderGameStatus","ref","_toggleAnimation","renderAnimationButtonContent","_pause","renderPauseButtonContent","_restart","renderRestartButtonContent","href","animation","Description","Board","App","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","logger","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAOaA,EAAW,CACtB,CAEEC,UAAW,EACXC,UAAW,IAEb,CAEED,UAAW,GACXC,UAAW,IAEb,CAEED,UAAW,GACXC,UAAW,IAEb,CAEED,UAAW,GACXC,UAAW,KAYFC,EACM,EADNA,EAEA,EAFAA,EAGE,EAHFA,EAIA,EAJAA,EAKA,EAaAC,EACK,EADLA,EAEF,EAFEA,EAGE,EAHFA,EAIK,EAJLA,EAKE,EALFA,EAMG,EAUHC,EAEH,EAUGC,EAED,EAMCC,EAAS,CACpBC,UAAW,CACTC,QAAS,eACTC,YAAa,QAEfC,YAAa,CACXF,QAAS,eACTC,YAAa,UAEfE,UAAW,CACTH,QAAS,eACTC,YAAa,QAEfG,WAAY,CACVJ,QAAS,eACTC,YAAa,SAEfI,kBAAmB,CACjBL,QAAS,eACTC,YAAa,gBAEfK,WAAY,CACVN,QAAS,qBACTC,YAAa,iBAEfM,iBAAkB,CAChBP,QAAS,qBACTC,YAAa,eAEfO,gBAAiB,CACfR,QAAS,SACTC,YAAa,UAEfQ,WAAY,CACVT,QAAS,eACTC,YAAa,WAEfS,OAAQ,CACNV,QAAS,eACTC,YAAa,sBAEfU,KAAM,CACJX,QAAS,SACTC,YAAa,iBAEfW,KAAM,CACJZ,QAAS,eACTC,YAAa,QAEfY,YAAa,CACXb,QAAS,eACTC,YAAa,aAEfa,aAAc,CACZd,QAAS,eACTC,YAAa,WAEfc,YAAa,CACXf,QAAS,eACTC,YAAa,UAEfe,UAAW,CACThB,QAAS,eACTC,YAAa,QAEfgB,aAAc,CACZjB,QAAS,eACTC,YAAa,gBAEfiB,SAAU,CACRlB,QAAS,eACTC,YAAa,OAEfkB,UAAW,CACTnB,QAAS,eACTC,YAAa,OAEfmB,YAAa,CACXpB,QAAS,gBACTC,YAAa,WAIJoB,EACH,UADGA,EAEH,UAFGA,EAGH,UAHGA,EAIH,UAJGA,EAKH,UALGA,EAMH,UANGA,EAOH,UAPGA,EAQH,UARGA,EASH,UAMGC,EAAa,CACxB,CACE,gBAAmB,qDAErB,CACE,UAAa,uCCrLV,IAAMC,EAAoB,WAG/B,IAH+C,IAAfC,EAAc,uDAAN,EAChChC,EAAcD,EAASiC,GAAvBhC,UACFiC,EAAS,GACNC,EAAI,EAAGA,EAAIlC,EAAWkC,IAAK,CAElC,IADA,IAAMC,EAAM,GACHC,EAAI,EAAGA,EAAIpC,EAAWoC,IAC7BD,EAAIE,KAAK,CACPC,SAAUJ,EACVK,SAAUH,EACVI,OAAQtC,EACRuC,QAAQ,EACRC,MAAO,IAGXT,EAAOI,KAAKF,GAEd,OAAOF,GAqDIU,EAAiB,SAACV,EAAQW,EAAMZ,GAAW,IAC9ChC,EAAcD,EAASiC,GAAvBhC,UACAsC,EAAuBM,EAAvBN,SAAUC,EAAaK,EAAbL,SACZM,EAAS,GAyBf,OAxBIP,EAAW,GACbO,EAAOR,KAAKJ,EAAOK,EAAW,GAAGC,IAE/BD,EAAWtC,EAAY,GACzB6C,EAAOR,KAAKJ,EAAOK,EAAW,GAAGC,IAE/BA,EAAW,GACbM,EAAOR,KAAKJ,EAAOK,GAAUC,EAAW,IAEtCA,EAAWvC,EAAY,GACzB6C,EAAOR,KAAKJ,EAAOK,GAAUC,EAAW,IAEtCD,EAAW,GAAKC,EAAW,GAC7BM,EAAOR,KAAKJ,EAAOK,EAAW,GAAGC,EAAW,IAE1CD,EAAW,GAAKC,EAAWvC,EAAY,GACzC6C,EAAOR,KAAKJ,EAAOK,EAAW,GAAGC,EAAW,IAE1CD,EAAWtC,EAAY,GAAKuC,EAAWvC,EAAY,GACrD6C,EAAOR,KAAKJ,EAAOK,EAAW,GAAGC,EAAW,IAE1CD,EAAWtC,EAAY,GAAKuC,EAAW,GACzCM,EAAOR,KAAKJ,EAAOK,EAAW,GAAGC,EAAW,IAEvCM,GAOIC,EAAiB,SAACb,GAC7B,IAAIc,EAAc,EACdC,EAAU,EAWd,OAVAf,EAAOgB,SAAQ,SAACd,GACdA,EAAIc,SAAQ,SAACL,GACPA,EAAKJ,SAAWtC,GAClB6C,IAEEH,EAAKJ,SAAWtC,GAClB8C,UAIC,CACLD,cACAC,YAgCSE,EAAmB,SAACjB,EAAQkB,EAAiBC,EAAiBC,GACzE,IAAIC,GAAa,EACXC,EAAMtB,EAAOuB,OACnB,GAAIH,EACF,GAAIF,GAAmB,EAAG,CAAC,IAAD,EAOpBlB,EAAOkB,GAAiBC,GAL1Bd,EAFsB,EAEtBA,SACAC,EAHsB,EAGtBA,SACAC,EAJsB,EAItBA,OACAC,EALsB,EAKtBA,OACAC,EANsB,EAMtBA,MAGFT,EAAOkB,GAAiBC,GAAmB,CACzCd,WACAC,WACAkB,YAAajB,EACbA,OAAQtC,EACRuC,SACAiB,SAAS,EACTC,MAAOrD,EAAOe,YACdqB,WAGFU,GACuBG,IACrBH,EAAkB,EAClBD,IACAG,GAAa,QAGfD,GAAa,OAGf,GAAIF,EAAkBI,EAAK,CAAC,IAAD,EAQrBtB,EAAOkB,GAAiBC,GAN1Bd,EAFuB,EAEvBA,SACAC,EAHuB,EAGvBA,SACAkB,EAJuB,EAIvBA,YACAhB,EALuB,EAKvBA,OACAkB,EANuB,EAMvBA,MACAjB,EAPuB,EAOvBA,MAGFT,EAAOkB,GAAiBC,GAAmB,CACzCd,WACAC,WACAkB,cACAjB,OAAQiB,EACRhB,SACAiB,SAAS,EACTC,QACAjB,WAGFU,EACsB,IACpBA,EAAkBG,EAAM,EACxBJ,IACAG,GAAa,QAGfD,GAAa,EAGjB,MAAO,CACLpB,OAAQ2B,KAAKC,MAAMD,KAAKE,UAAU7B,IAClCK,SAAUa,EACVZ,SAAUa,EACVE,aACAD,eAQSU,EAAoB,SAAC9B,EAAQkB,EAAiBC,EAAiBC,GAC1E,IA9OoBW,EA8OhBV,GAAa,EACXC,EAAMtB,EAAOuB,OACnB,GAAIH,EACF,GAAIF,GAAmB,EAAG,CAAC,IAAD,EAOpBlB,EAAOkB,GAAiBC,GAL1Bd,EAFsB,EAEtBA,SACAC,EAHsB,EAGtBA,SACAC,EAJsB,EAItBA,OACAC,EALsB,EAKtBA,OACAC,EANsB,EAMtBA,MAGFT,EAAOkB,GAAiBC,GAAmB,CACzCd,WACAC,WACAkB,YAAajB,EACbA,OAAQtC,EACRuC,SACAiB,SAAS,EACTC,OAjQcK,EAiQMZ,EAhQnBY,EAAS,IAAM,EAgQuB1D,EAAOoB,SAAWpB,EAAOqB,WAChEe,WAGFU,GACuBG,IACrBH,EAAkB,EAClBD,IACAG,GAAa,QAGfD,GAAa,OAGf,GAAIF,EAAkBI,EAAK,CAAC,IAAD,EAQrBtB,EAAOkB,GAAiBC,GAN1Bd,EAFuB,EAEvBA,SACAC,EAHuB,EAGvBA,SACAkB,EAJuB,EAIvBA,YACAhB,EALuB,EAKvBA,OACAkB,EANuB,EAMvBA,MACAjB,EAPuB,EAOvBA,MAGFT,EAAOkB,GAAiBC,GAAmB,CACzCd,WACAC,WACAkB,cACAjB,OAAQiB,EACRhB,SACAiB,SAAS,EACTC,QACAjB,WAGFU,EACsB,IACpBA,EAAkBG,EAAM,EACxBJ,IACAG,GAAa,QAGfD,GAAa,EAGjB,MAAO,CACLpB,OAAQ2B,KAAKC,MAAMD,KAAKE,UAAU7B,IAClCK,SAAUa,EACVZ,SAAUa,EACVE,aACAD,eCrTEY,EAAa,SAACjC,GAIlB,ODqD4B,SAACC,EAAQD,GAarC,OAZAC,EAAOgB,SAAQ,SAACd,GACdA,EAAIc,SAAQ,SAACL,GACNA,EAAKH,QACOE,EAAeV,EAAQW,EAAMZ,GACrCiB,SAAQ,SAACiB,GACVA,EAAMzB,QACRG,EAAKF,iBAMRT,ECnEYkC,CD+BY,SAAClC,EAAQD,GAGxC,IAHmD,IAAD,EACjBjC,EAASiC,GAAlChC,EAD0C,EAC1CA,UAAWC,EAD+B,EAC/BA,UACbmE,EAAQ,GAFoC,aAIhD,IAAMC,EAAIC,KAAKC,SAAWvE,EAAY,EAChCwE,EAAIF,KAAKC,SAAWvE,EAAY,EAC1BoE,EAAMK,WAAU,SAAAC,GAAI,OAAIA,EAAKL,IAAMA,GAAKK,EAAKF,IAAMA,KACrD,GACRJ,EAAM/B,KAAK,CAAEgC,IAAGG,OALdJ,EAAMZ,OAASvD,GAAY,IAQjC,IAAK,IAAIiC,EAAI,EAAGA,EAAIjC,EAAWiC,IAAK,CAAC,IAAD,EACjBkC,EAAMlC,GAAfmC,EAD0B,EAC1BA,EAAGG,EADuB,EACvBA,EACXvC,EAAOoC,GAAGG,GAAG/B,QAAS,EAExB,OAAOR,EC/CW0C,CADJ5C,EAAkBC,GACWA,GACEA,IAehCC,EAXA,WAAmD,IAAlD2C,EAAiD,uDAAzCX,EAAW7D,GAAmByE,EAAW,uCAC/D,OAAOA,EAAOC,MACZ,ICVyB,gBDWvB,OAAOD,EAAOE,QAChB,ICRuB,cDSrB,OAAOd,EAAWY,EAAOE,SAC3B,QACE,OAAOH,IEfPI,EAAY5E,EAYH4B,EAVD,WAAgC,IAA/B4C,EAA8B,uDAAtBI,EAAWH,EAAW,uCAC3C,OAAOA,EAAOC,MACZ,IDNwB,eCOtB,OAAOD,EAAOE,QAEhB,QACE,OAAOH,ICGEK,EAVI,WAAgC,IAA/BL,EAA8B,uDAFhC,EAEqBC,EAAW,uCAChD,OAAOA,EAAOC,MACZ,IFDyB,gBEEvB,OAAOD,EAAOE,QAEhB,QACE,OAAOH,ICNPM,EAAW,SAAClD,GAChB,MAAO,CACLe,YAAauB,KAAKa,IAAIpF,EAASiC,GAAOhC,UAAW,GACjDgD,QAAS,IAaE0B,EATF,WAAkC,IAAjCE,EAAgC,uDAAxBM,EAAS,GAAIL,EAAW,uCAC5C,OAAOA,EAAOC,MACZ,IHVyB,gBGWvB,OAAOhC,EAAe+B,EAAOE,SAC/B,QACE,OAAOH,ICFEQ,EAVK,WAAgC,IAA/BR,EAA8B,uDAFjC,EAEsBC,EAAW,uCACjD,OAAOA,EAAOC,MACZ,IJG+B,sBIF7B,OAAOD,EAAOE,QAEhB,QACE,OAAOH,ICIES,EAVS,WAAgC,IAA/BT,IAA8B,yDAAXC,EAAW,uCACrD,OAAOA,EAAOC,MACZ,ILKmC,0BKJjC,OAAOD,EAAOE,QAEhB,QACE,OAAOH,ICUEU,EAXEC,YAAgB,CAC/BtD,SACAD,QACAiD,aACAP,OACAU,cACAC,kBACAG,YCXyB,WAAiC,IAAhCZ,EAA+B,uDAHxC,KAG6BC,EAAW,uCACzD,OAAOA,EAAOC,MACZ,IPMwB,eOLtB,OAAOD,EAAOE,QAChB,QACE,OAAOH,IDOXa,WCHwB,WAAgC,IAA/Bb,EAA8B,uDAXvC,KAW4BC,EAAW,uCACvD,OAAOA,EAAOC,MACZ,IPD8B,qBOE5B,OAAOD,EAAOE,QAChB,QACE,OAAOH,M,4CCXN,SAASc,GAAcX,GAC5B,MAAO,CACLD,KRPyB,gBQQzBC,WAIG,SAASd,GAAYc,GAC1B,MAAO,CACLD,KRVuB,cQWvBC,WAIG,SAASY,GAAcZ,GAC5B,MAAO,CACLD,KRnByB,gBQoBzBC,WAkBG,SAASa,GAAmBb,GACjC,MAAO,CACLD,KRhCwB,eQiCxBC,WAIG,SAASc,GAAkBd,GAChC,MAAO,CACLD,KRrC8B,qBQsC9BC,WC9CG,IAAMe,GAAY,SAAC7D,GACxB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAOuB,OAAQtB,IACjC,IAAK,IAAIE,EAAI,EAAGA,EAAIH,EAAOC,GAAGsB,OAAQpB,IACpC,GAAIH,EAAOC,GAAGE,GAAGI,SAAWtC,EAC1B,OAAO,EAIb,OAAO,GAUI6F,GAAuB,SAAC9D,EAAQW,EAAMZ,EAAOgE,GAAmB,IACnE1D,EAA8CM,EAA9CN,SAAUC,EAAoCK,EAApCL,SAAUC,EAA0BI,EAA1BJ,OAAQC,EAAkBG,EAAlBH,OAAQC,EAAUE,EAAVF,MACtCuD,EAAarC,KAAKC,MAAMD,KAAKE,UAAU7B,IACzCiE,EAAa1D,EACjB,GAAIwD,EACF,OAAQxD,GACN,KAAKtC,EACHgG,EAAahG,EACb,MACF,KAAKA,EACHgG,EAAahG,OAMjB,GAAIsC,IAAWtC,EAA2B,CAExC,IAAKuC,GAAoB,IAAVC,EACb,OAAOyD,GAAgBF,EAAYrD,EAAMZ,GACpC,GAAIS,EAET,OAAO2D,GAAcH,GAGrBC,EAAahG,EAWnB,OAPA+F,EAAW3D,GAAUC,GAAY,CAC/BD,WACAC,WACAC,OAAQ0D,EACRzD,SACAC,SAEKuD,GAGHI,GAAa,SAACzD,GAAU,IACpBJ,EAA0BI,EAA1BJ,OAAQE,EAAkBE,EAAlBF,MAAOD,EAAWG,EAAXH,OACvB,OAAOD,IAAWtC,GAAuC,IAAVwC,IAAgBD,GASpD0D,GAAkB,SAAlBA,EAAmBlE,EAAQW,EAAMZ,GAmB5C,GAlBeW,EAAeV,EAAQW,EAAMZ,GACrCiB,SAAQ,SAACiB,GAAW,IACjB1B,EAAkB0B,EAAlB1B,OAAQE,EAAUwB,EAAVxB,MACZ2D,GAAWnC,KACbA,EAAM1B,OAAStC,EACfiG,EAAgBlE,EAAQiC,EAAOlC,IAM7BQ,IAAWtC,GAAuC,IAAVwC,IAC1CwB,EAAM1B,OAAStC,MAMfmG,GAAWzD,GAAO,CAAC,IACbN,EAAuBM,EAAvBN,SAAUC,EAAaK,EAAbL,SAClBK,EAAKJ,OAAStC,EACd+B,EAAOK,GAAUC,GAAUC,OAAStC,EAEtC,OAAO+B,GAOImE,GAAgB,SAACnE,GAY5B,OAXAA,EAAOgB,SAAQ,SAACd,GACdA,EAAIc,SAAQ,SAACL,GACPA,EAAKH,OACPG,EAAKJ,OAAStC,EACL0C,EAAKF,MAAQ,EACtBE,EAAKJ,OAAStC,EACU,IAAf0C,EAAKF,QACdE,EAAKJ,OAAStC,SAIb+B,GCrHYqE,G,yKACR,IAAD,EAC8CC,KAAKC,MAArDhG,EADE,EACFA,QAASiG,EADP,EACOA,MAAO9C,EADd,EACcA,MAAO+C,EADrB,EACqBA,IAAKC,EAD1B,EAC0BA,QAASC,EADnC,EACmCA,OAK3C,OAJIjD,IACFnD,EAAUmD,EAAMnD,QAChBiG,EAAQ9C,EAAMlD,aAGd,0BACEoG,UAAW,SAAWH,EACtBI,MAAO,CAACF,OAAQA,GAAUD,EAAU,UAAW,WAC/CI,KAAK,MACLC,aAAW,OACXP,MAAQA,EACRE,QAAUA,GACTnG,O,GAf0ByG,IAAMC,WCCpBC,G,sLACI3G,EAASwB,GAI9B,OAHKA,IACHA,EAAQoF,OAAO5G,IAETwB,GACN,KAAK,EACH,OAAOH,EACT,KAAK,EACH,OAAOA,EACT,KAAK,EACH,OAAOA,EACT,KAAK,EACH,OAAOA,EACT,KAAK,EACH,OAAOA,EACT,KAAK,EACH,OAAOA,EACT,KAAK,EACH,OAAOA,EACT,KAAK,EACH,OAAOA,EACT,KAAK,EACH,OAAOA,EACT,QACE,OAAOA,K,+BAGF,IACDrB,EAAY+F,KAAKC,MAAjBhG,QACR,OACE,0BAAMsG,MAAO,CAACO,MAAOd,KAAKe,sBAAsB9G,GAAU+G,WAAY,MAClE/G,O,GAhC4ByG,IAAMC,WCQtCM,G,kLAEe5E,GAAO,IAChBJ,EAA0CI,EAA1CJ,OAAQC,EAAkCG,EAAlCH,OAAQC,EAA0BE,EAA1BF,MAAOgB,EAAmBd,EAAnBc,QAASC,EAAUf,EAAVe,MACxC,OAAQnB,GACN,KAAKtC,EACH,OACE,yBAAK2G,UAAU,UAEnB,KAAK3G,EACH,OACE,yBAAK2G,UAAU,kBACb,kBAAC,GAAD,CAAOlD,MAAQD,EAAUC,EAAQrD,EAAOY,OAAS0F,QAAM,KAG7D,KAAK1G,EACH,OACE,yBAAK2G,UAAU,kBACb,kBAAC,GAAD,CAAUrG,QAAUkC,KAG1B,KAAKxC,EACH,OACE,yBAAK2G,UAAU,kBAEXpE,EACA,kBAAC,GAAD,CAAOkB,MAAQrD,EAAOc,OACtB,kBAAC,GAAD,CAAOuC,MAAQrD,EAAOY,UAI9B,KAAKhB,EACH,OACE,yBAAK2G,UAAU,SACb,kBAAC,GAAD,CAAOlD,MAAQrD,EAAOa,QAG5B,QACE,OAAO,iC,8BAIJsG,GACPA,EAAMC,iBADQ,MAE6CnB,KAAKC,OAChEmB,EAHc,EAENA,eAFM,EAES/E,KAFT,EAEeX,OAFf,EAEuBD,MAFvB,EAE8BiD,c,4BAIvCwC,GACLA,EAAMC,iBADM,MAE8CnB,KAAKC,OAC/DoB,EAHY,EAEJA,cAFI,EAEUhF,KAFV,EAEgBX,OAFhB,EAEwBD,MAFxB,EAE+BiD,c,+BAIlC,IACDrC,EAAS2D,KAAKC,MAAd5D,KACR,OACE,yBAAKiE,UAAU,OACbF,QAAUJ,KAAKsB,QAAQC,KAAKvB,MAC5BP,cAAgBO,KAAKwB,MAAMD,KAAKvB,OAEjCA,KAAKyB,kBAAkBpF,Q,GA7DXqE,IAAMC,WAoIVe,gBA9DS,SAACrD,GAAD,OAAWA,KAGR,SAACsD,EAAU1B,GACpC,MAAO,CACLmB,cAAe,SAAC/E,EAAMX,EAAQD,EAAOiD,GAGnC,GACEA,IAAe9E,GACf8E,IAAe9E,GACf8E,IAAe9E,GACf8E,IAAe9E,GACfyC,EAAKJ,SAAWtC,IAChB0C,EAAKc,QANP,CAWIuB,IAAe9E,GACjB+H,EAASvC,GAAaxF,IAGxB,IAAM8F,EAAaF,GAAqB9D,EAAQW,EAAMZ,GAElDY,EAAKH,QACPyF,EAASvC,GAAaxF,IC3FvB,SAAyB+H,EAAUjG,GAAoB,IAAZkG,EAAW,uDAAJ,GACvDD,GAAS,SAAUA,GACjB,IAAM3E,EAAMtB,EAAOuB,OACf4E,EAAO,CAAE9F,SAAUiB,EAAM,EAAGhB,SAAU,EAAGe,YAAY,EAAOD,YAAY,GACtEgF,EAAQC,aAAY,WACxB,GAAKF,EAAK9E,WAkBR8E,EAAK9E,YAAa,MAlBE,CAAC,IAAD,EACuB8E,EAAnC9F,EADY,EACZA,SAAUC,EADE,EACFA,SAAUc,EADR,EACQA,WAC5B+E,EAAOlF,EAAiBjB,EAAQK,EAAUC,EAAUc,GACpD6E,EAAStC,GAAkBwC,EAAKnG,SAE5BoB,IAAe+E,EAAK/E,aACtB+E,EAAK9F,SAAW,EAChB8F,EAAK7F,SAAWgB,EAAM,EACtB6E,EAAK9E,YAAa,IAGfD,GAAc+E,EAAK/E,aACtB+E,EAAK9F,SAAWiB,EAAM,EACtB6E,EAAK7F,SAAW,EAChB6F,EAAK9E,YAAa,MAMrB6E,GACHD,EAASrC,GAAiBwC,ODkEtBE,CAAeL,EAAUjC,IAEhBH,GAAUG,MC1DpB,SAA0BiC,EAAUjG,GAAoB,IAAZkG,EAAW,uDAAJ,GACxDD,GAAS,SAAUA,GACjB,IAAM3E,EAAMtB,EAAOuB,OACf4E,EAAO,CAAE9F,SAAUiB,EAAM,EAAGhB,SAAU,EAAGe,YAAY,EAAOD,YAAY,GACtEgF,EAAQC,aAAY,WACxB,GAAKF,EAAK9E,WAkBR8E,EAAK9E,YAAa,MAlBE,CAAC,IAAD,EACuB8E,EAAnC9F,EADY,EACZA,SAAUC,EADE,EACFA,SAAUc,EADR,EACQA,WAC5B+E,EAAOrE,EAAkB9B,EAAQK,EAAUC,EAAUc,GACrD6E,EAAStC,GAAkBwC,EAAKnG,SAE5BoB,IAAe+E,EAAK/E,aACtB+E,EAAK9F,SAAW,EAChB8F,EAAK7F,SAAWgB,EAAM,EACtB6E,EAAK9E,YAAa,IAGfD,GAAc+E,EAAK/E,aACtB+E,EAAK9F,SAAWiB,EAAM,EACtB6E,EAAK7F,SAAW,EAChB6F,EAAK9E,YAAa,MAMrB6E,GACHD,EAASrC,GAAiBwC,ODiCtBG,CAAgBN,EAAUjC,GAC1BiC,EAASvC,GAAaxF,KAExB+H,EAASxC,GAAaO,MAExB2B,aAAc,SAAChF,EAAMX,EAAQD,EAAOiD,GAGlC,GACEA,IAAe9E,GACf8E,IAAe9E,GACf8E,IAAe9E,GACf8E,IAAe9E,IACfyC,EAAKc,QALP,CAUIuB,IAAe9E,GACjB+H,EAASvC,GAAaxF,IAGxB,IAAM8F,EAAaF,GAAqB9D,EAAQW,EAAMZ,GAAO,GAEzD8D,GAAUG,IACZiC,EAASvC,GAAaxF,IAExB+H,EAASxC,GAAaO,SAKbgC,CAA6CT,IE5IvCiB,G,yKACR,IACDtG,EAAQoE,KAAKC,MAAbrE,IACR,OACE,yBAAK0E,UAAU,OAEX1E,EAAIuG,KAAI,SAAC9F,EAAM+F,GACb,OACE,kBAAC,GAAD,CAAM/F,KAAOA,EAAOgG,IAAMD,Y,GARP1B,IAAMC,WCCjC2B,G,yKACO,IACH5G,EAAWsE,KAAKC,MAAhBvE,OADE,EAEuBsE,KAAKC,MAA5BxE,EAFA,EAEAA,MAER,OADAC,EAHQ,EAEOuD,aACSvD,EAEtB,yBAAK4E,UAAU,SAASC,MAAO,CAACgC,SAAU,CAAC,GAAI,GAAI,GAAI,IAAI9G,GAAS,OAEhEC,EAAOyG,KAAI,SAACvG,EAAKwG,GACf,OACE,kBAAC,GAAD,CAAKxG,IAAMA,EAAMyG,IAAMD,Y,GAVhB1B,IAAMC,WA4BZe,gBARS,SAACrD,GACvB,MAAO,CACLY,YAAaZ,EAAMY,YACnBvD,OAAQ2C,EAAM3C,OACdD,MAAO4C,EAAM5C,SAIFiG,CAAyBY,IC1BlCE,G,oDAEJ,WAAYvC,GAAQ,IAAD,8BACjB,cAAMA,IACD5B,MAAQ,CACXuD,KAAM,GAHS,E,gEAMG,IAAD,OACnB5B,KAAK8B,MAAQC,aAAa,WACA,EAAK9B,MAArBpB,cACY/E,GAClB,EAAK2I,SAAS,CAACb,KAAM,EAAKvD,MAAMuD,KAAO,MAExC,O,6CAGC5B,KAAK8B,OACPY,cAAc1C,KAAK8B,S,mCAID,IAAXF,EAAU,uDAAH,EAChB5B,KAAKyC,SAAS,CAAEb,W,+BAGP,IACDA,EAAS5B,KAAK3B,MAAduD,KACR,OACE,yBAAKtB,UAAU,QACb,kBAAC,GAAD,CAAOlD,MAAQrD,EAAOW,aACtB,8BAAQkH,EAAR,W,GA/BYlB,IAAMC,WAsDXe,gBAfS,SAACrD,GACvB,IACIQ,EAAc,EAClB,OAFeR,EAAMK,YAGnB,KAAM9E,EACN,KAAMA,EACJiF,EAAc,EACd,MACF,QACEA,EAAc,EAElB,MAAO,CAAEA,iBAI6B,KAAM,KAAM,CAAE8D,YAAY,GAAnDjB,CAA2Dc,IClDpEI,G,oDACJ,WAAa3C,GAAQ,IAAD,8BAClB,cAAMA,IACD4C,SAAWnC,IAAMoC,YAFJ,E,8DAKD5B,GACjBA,EAAMC,iBADkB,MAEYnB,KAAKC,OACzC8C,EAHwB,EAEhBA,aACI7B,EAHY,EAEHhC,c,uCAILgC,GAChBA,EAAMC,iBADiB,MAEoBnB,KAAKC,MAC5C9D,EAHmB,EAEfV,MACY,GAEpBsH,EALuB,EAERA,aAGH,CAAEC,OAAQ,CAAE7G,MADxBA,EAAQA,EAAQ,EAAI,EAAIA,IAJD,EAEK+C,c,+BAOpBgC,GACRA,EAAMC,iBADS,MAEwBnB,KAAKC,OAC5CgD,EAHe,EAEPA,SAFO,EAEExH,MAFF,EAESyD,YAExBc,KAAK6C,SAASK,QAAQC,WAAW,K,6BAG3BjC,GACNA,EAAMC,iBADO,MAEiBnB,KAAKC,MAA3BvB,EAFK,EAELA,YACR0E,EAHa,EAEOA,OACd1E,K,uCAGUwC,GAChBA,EAAMC,iBADiB,MAEsBnB,KAAKC,OAClDoD,EAHuB,EAEfA,iBAFe,EAEEvE,mB,uCAKTJ,GAChB,OAAQA,GACN,KAAK9E,EACH,OAAOG,EAAOkB,UAChB,KAAKrB,EACH,OAAOG,EAAOiB,YAChB,KAAKpB,EACH,OAAOG,EAAOe,YAChB,KAAKlB,EACH,OAAOG,EAAOmB,aAChB,KAAKtB,EACL,KAAKA,EACL,QACE,OAAOG,EAAOgB,gB,+CAKMkB,GACxB,OAAQA,GACN,KAAKrC,EACH,MAAO,WACT,QACE,MAAO,W,mDAKiBqC,GAC5B,OAAIA,EACK,SAEA,Y,iDAKiBA,GAC1B,OAAIA,IAAWrC,EACN,QAEA,Y,uCAKO6B,GAChB,MAAO,CAAC1B,EAAOC,UAAWD,EAAOI,YAAaJ,EAAOK,UAAWL,EAAOM,YAAYoB,K,+BAG3E,IAAD,EAC8CuE,KAAKC,MAAlDxE,EADD,EACCA,MAAOiD,EADR,EACQA,WAAYP,EADpB,EACoBA,KAAMW,EAD1B,EAC0BA,gBACjC,OACE,yBAAKwB,UAAU,QAeb,yBAAKA,UAAU,QACb,kBAAC,GAAD,CAAOlD,MAAQrD,EAAOQ,aACtB,kBAAC,GAAD,CAAO6C,MAAQ4C,KAAKsD,iBAAiB7H,GAAQ2E,QAAUJ,KAAKuD,iBAAiBhC,KAAKvB,MAAQG,IAAI,mBAG9F,kBAAC,IAAMqD,SAAP,KACE,yBAAKlD,UAAU,QACb,kBAAC,GAAD,CAAOlD,MAAQrD,EAAOU,kBACtB,8BAAQ0D,EAAK3B,cAEf,yBAAK8D,UAAU,QACb,kBAAC,GAAD,CAAOlD,MAAQrD,EAAOa,OACtB,8BAAQuD,EAAK1B,UAEf,yBAAK6D,UAAU,QACb,kBAAC,GAAD,CAAOlD,MAAQrD,EAAOc,OACtB,8BAAQrB,EAASiC,GAAO/B,aAI9B,yBAAK4G,UAAU,QACb,kBAAC,GAAD,CAAOlD,MAAQrD,EAAOS,mBACpB,kBAAC,GAAD,CAAO4C,MAAQ4C,KAAKyD,iBAAiB/E,GAAcyB,IAAI,mBAE3D,kBAAC,GAAD,CAAOuD,IAAK1D,KAAK6C,WACjB,yBAAKvC,UAAU,QACb,4BAAQA,UAAU,YAAYF,QAAUJ,KAAK2D,iBAAiBpC,KAAKvB,OAAUA,KAAK4D,6BAA6B9E,IAC/G,4BAAQwB,UAAU,QAAQF,QAAUJ,KAAK6D,OAAOtC,KAAKvB,OAAUA,KAAK8D,yBAAyBpF,IAC7F,4BAAQ4B,UAAU,UAAUF,QAAUJ,KAAK+D,SAASxC,KAAKvB,OAAUA,KAAKgE,2BAA2BtF,KAErG,yBAAK4B,UAAU,QACb,uBAAGA,UAAU,cAAc2D,KAAK,6DAAhC,qB,GA5ISvD,IAAMC,WAiMVe,gBA9CS,SAACrD,GACvB,OAAOA,KAGkB,SAACsD,GAC1B,MAAO,CACLoB,YAAa,WAAa7D,GAAgB,IAA1B8D,EAAyB,EAAzBA,OACRvH,EAAQoF,OAAOmC,EAAO7G,OAE5BuG,cAAcxD,GACdyC,EAASrC,GAAiB,OAC1BqC,EAAStC,GAAkB,OAE3BsC,ETtKG,CACLpD,KRHwB,eQIxBC,QSoKuB/C,IAErBkG,EAASjE,GAAWjC,IAEpBkG,EAASvC,GAAaxF,KAExBqJ,QAAS,SAACxH,EAAOyD,GAEfwD,cAAcxD,GACdyC,EAASrC,GAAiB,OAC1BqC,EAAStC,GAAkB,OAE3BsC,EAASjE,GAAWjC,IAEpBkG,EAASvC,GAAaxF,KAExBwJ,MAAO,SAAC1E,GACFA,IAAe9E,GACjB+H,EAASvC,GAAaxF,IAGtB8E,IAAe9E,GACf8E,IAAe9E,GAEf+H,EAASvC,GAAaxF,KAG1ByJ,gBAAiB,SAACa,GAChBvC,EThKG,CACLpD,KR3BmC,0BQ4BnCC,SS8JkC0F,QAKvBxC,CAA6CkB,ICvMvCuB,G,yKAEjB,OACE,iCACE,yBAAK7D,UAAU,SACb,+CAEF,yBAAKA,UAAU,sBACb,wEACA,4DACA,uFAEF,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QACb,oCACA,wCACA,kBAAC,GAAD,CAAOlD,MAAQrD,EAAOI,cACtB,wEAEF,yBAAKmG,UAAU,QACb,oCACA,wCACA,0BAAMA,UAAU,QAAhB,UACA,uFAEF,yBAAKA,UAAU,QACb,oCACA,wCACA,0BAAMA,UAAU,QAAhB,SACA,8DAEF,yBAAKA,UAAU,QACb,oCACA,wCACA,0BAAMA,UAAU,SAAhB,SACA,uDAEF,yBAAKA,UAAU,QACb,uEAEF,yBAAKA,UAAU,QACb,gGAEF,yBAAKA,UAAU,QACb,oCACA,kBAAC,GAAD,CAAOlD,MAAQrD,EAAOsB,cACtB,4EAEF,yBAAKiF,UAAU,QACb,oCACA,kBAAC,GAAD,CAAOlD,MAAQrD,EAAOY,SACtB,sDAEF,yBAAK2F,UAAU,QACb,oCACA,kBAAC,GAAD,CAAOlD,MAAQrD,EAAOQ,aACtB,iHAEF,yBAAK+F,UAAU,QACb,oCACA,kBAAC,GAAD,CAAOlD,MAAQrD,EAAOU,kBACtB,wEAEF,yBAAK6F,UAAU,QACb,oCACA,kBAAC,GAAD,CAAOlD,MAAQrD,EAAOa,OACtB,6DAEF,yBAAK0F,UAAU,QACb,oCACA,kBAAC,GAAD,CAAOlD,MAAQrD,EAAOc,OACtB,4EAEF,yBAAKyF,UAAU,QACb,oCACA,kBAAC,GAAD,CAAOlD,MAAQrD,EAAOS,mBACtB,gEAEF,yBAAK8F,UAAU,QACb,oCACA,kBAAC,GAAD,CAAOlD,MAAQrD,EAAOW,aACtB,uF,GAjF6BgG,IAAMC,WCC1ByD,G,yKAEjB,OACE,yBAAK9D,UAAU,SACb,kBAAC,GAAD,MACA,yBAAKA,UAAU,QACb,kBAAC,GAAD,OAEF,kBAAC,GAAD,W,GAR2BI,IAAMC,WCCnC0D,G,yKACM,IAEFjC,EADsBpC,KAAKC,MAAzBnB,gBACwB,EAAI,EACpC,OACE,yBAAKwB,UAAU,MAAMC,MAAQhF,EAAW6G,IACtC,2DACA,yBAAK9B,UAAU,aACb,kBAAC,GAAD,Y,GARQI,IAAMC,WA+DTe,gBA/CS,SAACrD,GACvB,MAAO,CACLS,gBAAiBT,EAAMS,mBA6CZ4C,CAAyB2C,ICxDpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPN,IAAMC,GAAQC,YAAY7F,EAAU8F,YAAgBC,IAAQC,MAE5DC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAQA,IAChB,kBAAC,GAAD,OAEFO,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6fd37a46.chunk.js","sourcesContent":["/**\n * 等级分布\n * 0 - easy   - 8 * 8   - 10\n * 1 - medium - 12 * 12 - 20\n * 2 - hard   - 16 * 16 - 30\n * 3 - super  - 20 * 20 - 40\n */\nexport const mapLevel = [\n  {\n    // 0.08\n    baseCount: 8,\n    mineCount: 10\n  },\n  {\n    // 0.11\n    baseCount: 15,\n    mineCount: 25\n  },\n  {\n    // 0.15\n    baseCount: 16,\n    mineCount: 40\n  },\n  {\n    // 0.2\n    baseCount: 20,\n    mineCount: 80\n  }\n]\n/**\n * 定义方块状态\n * 0 未翻开\n * 1 翻开 且为空\n * 2 翻开 且为数字\n * 3 翻开 且为地雷\n * 4 未翻开 且被标记\n * 9 翻开 且展示emoji图像\n */\nexport const CellTypes = {\n  CELL_NOT_REVEAL: 0,\n  CELL_NULL: 1,\n  CELL_NUMBER: 2,\n  CELL_MINE: 3,\n  CELL_FLAG: 4,\n  CELL_EMOJI: 9\n}\n\n/**\n * 定义游戏状态\n * 0 未开始\n * 1 游戏开始\n * 2 游戏暂停\n * 3 游戏继续\n * 4 游戏失败\n * 5 游戏成功\n */\nexport const GameStatus = {\n  GAME_NOT_START: 0,\n  GAME_ON: 1,\n  GAME_PAUSED: 2,\n  GAME_CONTINUED: 3,\n  GAME_FAILED: 4,\n  GAME_SUCCESS: 5\n}\n\n/**\n * 定义游戏等级\n * 0 简单\n * 1 中级\n * 2 困难\n * 3 超难\n */\nexport const GameLevel = {\n  SIMPLE: 0,\n  MEDIUM: 1,\n  HARD: 2,\n  SUPER: 3\n}\n\n/**\n * 定义时钟状态\n * 0 停止\n * 1 继续\n */\nexport const ClockStatus = {\n  STOP: 0,\n  CONTINUE: 1\n}\n\n/**\n * 系统级Emoji定义\n */\nexport const Emojis = {\n  GAME_EASY: {\n    content: '😀',\n    description: 'Easy'\n  },\n  GAME_MEDIUM: {\n    content: '😃',\n    description: 'Medium'\n  },\n  GAME_HARD: {\n    content: '😅',\n    description: 'Hard'\n  },\n  GAME_SUPER: {\n    content: '😨',\n    description: 'Super'\n  },\n  INFO_LEVEL_CHOICE: {\n    content: '🎲',\n    description: 'Level choice'\n  },\n  INFO_LEVEL: {\n    content: '🌡️',\n    description: 'Current Level'\n  },\n  INFO_GAME_STATUS: {\n    content: '🕹️',\n    description: 'Game Status'\n  },\n  INFO_GAME_BLOCK: {\n    content: '⬛',\n    description: 'Blocks'\n  },\n  INFO_CLOCK: {\n    content: '🕒',\n    description: 'time(s)'\n  },\n  MONKEY: {\n    content: '🙈',\n    description: 'Monkey see nothing'\n  },\n  FLAG: {\n    content: '⛳',\n    description: 'Flagged Block'\n  },\n  MINE: {\n    content: '💣',\n    description: 'Mine'\n  },\n  GAME_FAILED: {\n    content: '☠️',\n    description: 'Game Over'\n  },\n  GAME_PLAYING: {\n    content: '🎮',\n    description: 'On Game'\n  },\n  GAME_PAUSED: {\n    content: '⏸️',\n    description: 'Paused'\n  },\n  GAME_IDLE: {\n    content: '💤',\n    description: 'Idle'\n  },\n  GAME_SUCCESS: {\n    content: '🙌',\n    description: 'Game Success'\n  },\n  INFO_COW: {\n    content: '🐮',\n    description: 'Cow'\n  },\n  INFO_BEAR: {\n    content: '🍺',\n    description: 'Cow'\n  },\n  INFO_NUMBER: {\n    content: '5️⃣',\n    description: 'Number'\n  }\n}\n\nexport const NumberColors = {\n  MINE_0: '#000000',\n  MINE_1: '#00CCFF',\n  MINE_2: '#00CC33',\n  MINE_3: '#FF9966',\n  MINE_4: '#0000FF',\n  MINE_5: '#9900FF',\n  MINE_6: '#CC0099',\n  MINE_7: '#000099',\n  MINE_8: '#FF0000'\n}\n\n/**\n * 定义动画\n */\nexport const Animations = [\n  {\n    'backgroundImage': 'linear-gradient(-20deg, #e9defa 0%, #fbfcdb 100%)'\n  },\n  {\n    'animation': 'transition-bg 10s infinite reverse'\n  }\n]","import { mapLevel, CellTypes, Emojis } from '../constant'\n\n/**\n * 判断是否是偶数\n * @param {Number} number \n */\nfunction isEvenNumber(number) {\n  return number % 2 === 0\n}\n\n/**\n * 初始化一个空二维数组\n * @param { Number } level 当前等级\n */\nexport const createEmptyMatrix = (level = 0) => {\n  const { baseCount } = mapLevel[level];\n  const matrix = [];\n  for (let i = 0; i < baseCount; i++) {\n    const row = []\n    for (let j = 0; j < baseCount; j++) {\n      row.push({\n        rowIndex: i,\n        colIndex: j,\n        status: CellTypes.CELL_NOT_REVEAL,\n        isMine: false,\n        value: 0\n      })\n    }\n    matrix.push(row);\n  }\n  return matrix\n}\n\n/**\n * 初始化地雷矩阵\n * @param { Array } matrix 游戏矩阵\n * @param { Number } level 游戏等级\n */\nexport const initMinesToMatrix = (matrix, level) => {\n  const { baseCount, mineCount } = mapLevel[level];\n  const mines = [];\n  while(mines.length < mineCount) {\n    const x = Math.random() * baseCount | 0;\n    const y = Math.random() * baseCount | 0;\n    const has = mines.findIndex(mine => mine.x === x && mine.y === y);\n    if (has < 0) {\n      mines.push({ x, y });\n    }\n  }\n  for (let i = 0; i < mineCount; i++) {\n    const { x, y } = mines[i];\n    matrix[x][y].isMine = true;\n  }\n  return matrix\n}\n\n/**\n * 给每个单元格赋值\n * @param { Array } matrix 游戏矩阵\n * @param { number } level 游戏等级\n */\nexport const initCellValues = (matrix, level) => {\n  matrix.forEach((row) => {\n    row.forEach((cell) => {\n      if (!cell.isMine) {\n        const around = traverseMatrix(matrix, cell, level);\n        around.forEach((block) => {\n          if (block.isMine) {\n            cell.value++\n          }\n        })\n      }\n    })\n  })\n  return matrix;\n};\n\n/**\n * 遍历一个单元的周围\n * @param {*} matrix 游戏矩阵\n * @param {*} cell 一个单元\n * @param {*} level 游戏等级\n */\nexport const traverseMatrix = (matrix, cell, level) => {\n  const { baseCount } = mapLevel[level]\n  const { rowIndex, colIndex } = cell;\n  const around = [];\n  if (rowIndex > 0) {\n    around.push(matrix[rowIndex - 1][colIndex]);\n  }\n  if (rowIndex < baseCount - 1) {\n    around.push(matrix[rowIndex + 1][colIndex]);\n  }\n  if (colIndex > 0) {\n    around.push(matrix[rowIndex][colIndex - 1]);\n  }\n  if (colIndex < baseCount - 1) {\n    around.push(matrix[rowIndex][colIndex + 1]);\n  }\n  if (rowIndex > 0 && colIndex > 0) {\n    around.push(matrix[rowIndex - 1][colIndex - 1]);\n  }\n  if (rowIndex > 0 && colIndex < baseCount - 1) {\n    around.push(matrix[rowIndex - 1][colIndex + 1]);\n  }\n  if (rowIndex < baseCount - 1 && colIndex < baseCount - 1) {\n    around.push(matrix[rowIndex + 1][colIndex + 1]);\n  }\n  if (rowIndex < baseCount - 1 && colIndex > 0) {\n    around.push(matrix[rowIndex + 1][colIndex - 1]);\n  }\n  return around;\n}\n\n/**\n * 地雷状态统计\n * @param {Array} matrix 游戏矩阵\n */\nexport const mineStatistics = (matrix) => {\n  let notRevealed = 0\n  let flagged = 0\n  matrix.forEach((row) => {\n    row.forEach((cell) => {\n      if (cell.status === CellTypes.CELL_NOT_REVEAL) {\n        notRevealed++\n      }\n      if (cell.status === CellTypes.CELL_FLAG) {\n        flagged++\n      }\n    })\n  })\n  return {\n    notRevealed,\n    flagged\n  }\n}\n\n/**\n * 产生随机的emoji矩阵\n * @param {Number} level \n */\nexport const randomMediaFrame = (level = 3) => {\n  const matrix = createEmptyMatrix(level);\n  const emojiArray = Object.keys(Emojis);\n  const emojiCount = emojiArray.length;\n  return matrix.map((row) => {\n    return row.map((cell) => {\n      const random = Math.random() * emojiCount | 0\n      return {\n        rowIndex: cell.rowIndex,\n        colIndex: cell.colIndex,\n        status: CellTypes.CELL_NULL,\n        isMine: false,\n        isEmoji: true,\n        emoji: Emojis[emojiArray[random]],\n        value: 0\n      }\n    })\n  })\n}\n\n/**\n * 产生一帧失败的矩阵\n * @param {Number} level \n */\nexport const failedMediaFrame = (matrix, currentRowIndex, currentColIndex, isPositive) => {\n  let isNextLine = false;\n  const len = matrix.length;\n  if (isPositive) {\n    if (currentRowIndex >= 0) {\n      const {\n        rowIndex,\n        colIndex,\n        status,\n        isMine,\n        value\n      } = matrix[currentRowIndex][currentColIndex];\n\n      matrix[currentRowIndex][currentColIndex] = {\n        rowIndex,\n        colIndex,\n        cacheStatus: status,\n        status: CellTypes.CELL_NULL,\n        isMine,\n        isEmoji: true,\n        emoji: Emojis.GAME_FAILED,\n        value\n      }\n\n      currentColIndex++;\n      if (currentColIndex >= len) {\n        currentColIndex = 0;\n        currentRowIndex--;\n        isNextLine = true;\n      }\n    } else {\n      isPositive = false;\n    }\n  } else {\n    if (currentRowIndex < len) {\n      const {\n        rowIndex,\n        colIndex,\n        cacheStatus,\n        isMine,\n        emoji,\n        value\n      } = matrix[currentRowIndex][currentColIndex];\n\n      matrix[currentRowIndex][currentColIndex] = {\n        rowIndex,\n        colIndex,\n        cacheStatus,\n        status: cacheStatus,\n        isMine,\n        isEmoji: false,\n        emoji,\n        value\n      }\n\n      currentColIndex--;\n      if (currentColIndex < 0) {\n        currentColIndex = len - 1;\n        currentRowIndex++;\n        isNextLine = true;\n      }\n    } else {\n      isPositive = true;\n    }\n  }\n  return {\n    matrix: JSON.parse(JSON.stringify(matrix)),\n    rowIndex: currentRowIndex,\n    colIndex: currentColIndex,\n    isNextLine,\n    isPositive\n  }\n}\n\n/**\n * 产生一帧成功的矩阵\n * @param {Number} level \n */\nexport const successMediaFrame = (matrix, currentRowIndex, currentColIndex, isPositive) => {\n  let isNextLine = false;\n  const len = matrix.length;\n  if (isPositive) {\n    if (currentRowIndex >= 0) {\n      const {\n        rowIndex,\n        colIndex,\n        status,\n        isMine,\n        value\n      } = matrix[currentRowIndex][currentColIndex];\n\n      matrix[currentRowIndex][currentColIndex] = {\n        rowIndex,\n        colIndex,\n        cacheStatus: status,\n        status: CellTypes.CELL_NULL,\n        isMine,\n        isEmoji: true,\n        emoji: isEvenNumber(currentColIndex) ? Emojis.INFO_COW : Emojis.INFO_BEAR,\n        value\n      }\n\n      currentColIndex++;\n      if (currentColIndex >= len) {\n        currentColIndex = 0;\n        currentRowIndex--;\n        isNextLine = true;\n      }\n    } else {\n      isPositive = false;\n    }\n  } else {\n    if (currentRowIndex < len) {\n      const {\n        rowIndex,\n        colIndex,\n        cacheStatus,\n        isMine,\n        emoji,\n        value\n      } = matrix[currentRowIndex][currentColIndex];\n\n      matrix[currentRowIndex][currentColIndex] = {\n        rowIndex,\n        colIndex,\n        cacheStatus,\n        status: cacheStatus,\n        isMine,\n        isEmoji: false,\n        emoji,\n        value\n      }\n\n      currentColIndex--;\n      if (currentColIndex < 0) {\n        currentColIndex = len - 1;\n        currentRowIndex++;\n        isNextLine = true;\n      }\n    } else {\n      isPositive = true;\n    }\n  }\n  return {\n    matrix: JSON.parse(JSON.stringify(matrix)),\n    rowIndex: currentRowIndex,\n    colIndex: currentColIndex,\n    isNextLine,\n    isPositive\n  }\n}\n","import { CHANGE_MATRIX, INIT_MATRIX } from '../../types';\nimport { createEmptyMatrix, initMinesToMatrix, initCellValues }from '../../../util';\nimport { GameLevel } from '../../../constant'\n\nconst initMatrix = (level) => {\n  const empty = createEmptyMatrix(level)\n  const withMines = initMinesToMatrix(empty, level);\n  const withValues = initCellValues(withMines, level);\n  return withValues\n}\n\nconst matrix = (state = initMatrix(GameLevel.MEDIUM), action) => {\n  switch(action.type) {\n    case CHANGE_MATRIX:\n      return action.payload;\n    case INIT_MATRIX:\n      return initMatrix(action.payload);\n    default: \n      return state;\n  }\n}\n\nexport default matrix;","// 修改level值\nexport const CHANGE_LEVEL = 'CHANGE_LEVEL'\n// 修改matrix\nexport const CHANGE_MATRIX = 'CHANGE_MATRIX'\n// 修改游戏状态\nexport const CHANGE_STATUS = 'CHANGE_STATUS'\n// 初始化matrix\nexport const INIT_MATRIX = 'INIT_MATRIX'\n// 切换时钟状态\nexport const CHANGE_CLOCK_STATUS = 'CHANGE_CLOCK_STATUS'\n// 切换动画状态\nexport const CHANGE_ANIMATION_STATUS = 'CHANGE_ANIMATION_STATUS'\n// 切换视频状态\nexport const CHANGE_MEDIA = 'CHANGE_MEDIA'\n// 切换视频控制器\nexport const CHANGE_MEDIA_TIMER = 'CHANGE_MEDIA_TIMER'","import { CHANGE_LEVEL } from '../../types';\nimport { GameLevel } from '../../../constant';\n\nconst initState = GameLevel.MEDIUM;\n\nconst level = (state = initState, action) => {\n  switch(action.type) {\n    case CHANGE_LEVEL: {\n      return action.payload;\n    }\n    default: \n      return state;\n  }\n}\n\nexport default level;","import { CHANGE_STATUS } from '../../types';\n\nconst initState = 0;\n\nconst gameStatus = (state = initState, action) => {\n  switch(action.type) {\n    case CHANGE_STATUS: {\n      return action.payload;\n    }\n    default: \n      return state;\n  }\n}\n\nexport default gameStatus;","import { CHANGE_MATRIX } from '../../types';\nimport { mineStatistics } from '../../../util';\nimport { mapLevel } from '../../../constant'\n\nconst initMine = (level) => {\n  return {\n    notRevealed: Math.pow(mapLevel[level].baseCount, 2),\n    flagged: 0\n  }\n}\n\nconst mine = (state = initMine(0), action) => {\n  switch(action.type) {\n    case CHANGE_MATRIX:\n      return mineStatistics(action.payload);\n    default: \n      return state;\n  }\n}\n\nexport default mine;","import { CHANGE_CLOCK_STATUS } from '../../types';\n\nconst initState = 0;\n\nconst clockStatus = (state = initState, action) => {\n  switch(action.type) {\n    case CHANGE_CLOCK_STATUS: {\n      return action.payload;\n    }\n    default: \n      return state;\n  }\n}\n\nexport default clockStatus;","import { CHANGE_ANIMATION_STATUS } from '../../types';\n\nconst initState = true;\n\nconst animationStatus = (state = initState, action) => {\n  switch(action.type) {\n    case CHANGE_ANIMATION_STATUS: {\n      return action.payload;\n    }\n    default: \n      return state;\n  }\n}\n\nexport default animationStatus;","import { combineReducers } from 'redux';\nimport matrix from './matrix';\nimport level from './level';\nimport gameStatus from './status';\nimport mine from './mine';\nimport clockStatus from './clock';\nimport animationStatus from './animation';\nimport { mediaMatrix, mediaTimer } from './media';\n\nconst reducers = combineReducers({\n  matrix,\n  level,\n  gameStatus,\n  mine,\n  clockStatus,\n  animationStatus,\n  mediaMatrix,\n  mediaTimer\n})\n\nexport default reducers","import { CHANGE_MEDIA, CHANGE_MEDIA_TIMER } from '../../types';\n\nconst initMatrix = null;\nconst initTimer = null\n\nexport const mediaMatrix = (state = initMatrix, action) => {\n  switch(action.type) {\n    case CHANGE_MEDIA:\n      return action.payload;\n    default: \n      return state;\n  }\n}\n\nexport const mediaTimer = (state = initTimer, action) => {\n  switch(action.type) {\n    case CHANGE_MEDIA_TIMER:\n      return action.payload;\n    default:\n      return state;\n  }\n}","import * as types from '../types';\n\nexport function changeLevel (payload) {\n  return {\n    type: types.CHANGE_LEVEL,\n    payload\n  }\n}\nexport function changeMatrix (payload) {\n  return {\n    type: types.CHANGE_MATRIX,\n    payload\n  }\n}\n\nexport function initMatrix (payload) {\n  return {\n    type: types.INIT_MATRIX,\n    payload\n  }\n}\n\nexport function changeStatus (payload) {\n  return {\n    type: types.CHANGE_STATUS,\n    payload\n  }\n}\n\nexport function resetClock (payload) {\n  return {\n    type: types.CHANGE_CLOCK_STATUS,\n    payload\n  }\n}\n\nexport function changeAnimationStatus (payload) {\n  return {\n    type: types.CHANGE_ANIMATION_STATUS,\n    payload\n  }\n}\n\nexport function changeMediaMatrix (payload) {\n  return {\n    type: types.CHANGE_MEDIA,\n    payload\n  }\n}\n\nexport function changeMediaTimer (payload) {\n  return {\n    type: types.CHANGE_MEDIA_TIMER,\n    payload\n  }\n}","import { CellTypes } from '../../constant'\nimport { traverseMatrix } from '../../util'\n/**\n * 判断游戏是否成功\n * @param {*} matrix 游戏矩阵\n * @param {*} level 游戏等级\n */\nexport const isSuccess = (matrix) => {\n  for (let i = 0; i < matrix.length; i++) {\n    for (let j = 0; j < matrix[i].length; j++) {\n      if (matrix[i][j].status === CellTypes.CELL_NOT_REVEAL) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\n/**\n * 修改单元状态\n * @param {*} matrix 游戏矩阵\n * @param {*} cell 一个单元\n * @param {*} level 游戏等级\n * @param {*} onContextMenu 是否右键\n */\nexport const replaceAllCellStatus = (matrix, cell, level, onContextMenu) => {\n  const { rowIndex, colIndex, status, isMine, value } = cell\n  const nextMatrix = JSON.parse(JSON.stringify(matrix))\n  let nextStatus = status\n  if (onContextMenu) {\n    switch (status) {\n      case CellTypes.CELL_NOT_REVEAL:\n        nextStatus = CellTypes.CELL_FLAG;\n        break;\n      case CellTypes.CELL_FLAG:\n        nextStatus = CellTypes.CELL_NOT_REVEAL;\n        break;\n      default: \n        break;\n    }\n  } else {\n    if (status === CellTypes.CELL_NOT_REVEAL) {\n      // 空单元\n      if (!isMine && value === 0) {\n        return revealEmptyCell(nextMatrix, cell, level)\n      } else if (isMine) {\n        // 地雷\n        return revealAllCell(nextMatrix)\n      } else {\n        // 数字\n        nextStatus = CellTypes.CELL_NUMBER;\n      }\n    }\n  }\n  nextMatrix[rowIndex][colIndex] = {\n    rowIndex,\n    colIndex,\n    status: nextStatus,\n    isMine,\n    value\n  }\n  return nextMatrix\n}\n\nconst isNullCell = (cell) => {\n  const { status, value, isMine } = cell\n  return status === CellTypes.CELL_NOT_REVEAL && value === 0 && !isMine\n}\n\n/**\n * 遍历清除当前周围的空单元\n * @param {*} matrix 游戏矩阵\n * @param {*} cell 一个单元\n * @param {*} level 游戏等级\n */\nexport const revealEmptyCell = (matrix, cell, level) => {\n  const around = traverseMatrix(matrix, cell, level);\n  around.forEach((block) => {\n    const { status, value } = block;\n    if (isNullCell(block)) {\n      block.status = CellTypes.CELL_NULL;\n      revealEmptyCell(matrix, block, level);\n    }\n    // if (status === CellTypes.CELL_NOT_REVEAL && value === 0 && !isMine) {\n    //   block.status = CellTypes.CELL_NULL;\n    //   revealEmptyCell(matrix, block, level);\n    // }\n    if (status === CellTypes.CELL_NOT_REVEAL && value !== 0) {\n      block.status = CellTypes.CELL_NUMBER;\n    }\n  });\n  // This cell may not be the matrix's cell, so should set to matrix\n  // fix: one monkey surrounded with numbers that cannot be revealed\n  // Recursive Function will check cell repeatly...\n  if (isNullCell(cell)) {\n    const { rowIndex, colIndex } = cell\n    cell.status = CellTypes.CELL_NULL;\n    matrix[rowIndex][colIndex].status = CellTypes.CELL_NULL\n  }\n  return matrix;\n}\n\n/**\n * 翻开所有的单元\n * @param {*} matrix 游戏矩阵\n */\nexport const revealAllCell = (matrix) => {\n  matrix.forEach((row) => {\n    row.forEach((cell) => {\n      if (cell.isMine) {\n        cell.status = CellTypes.CELL_MINE\n      } else if (cell.value > 0) {\n        cell.status = CellTypes.CELL_NUMBER\n      } else if (cell.value === 0) {\n        cell.status = CellTypes.CELL_NULL\n      }\n    })\n  })\n  return matrix\n}","import React from 'react';\nexport default class Emoji extends React.Component {\n  render () {\n    let { content, title, emoji, css, onClick, cursor } = this.props;\n    if (emoji) {\n      content = emoji.content\n      title = emoji.description\n    }\n    return (\n      <span\n        className={\"title \" + css}\n        style={{cursor: cursor || onClick ? 'pointer': 'default'}}\n        role=\"img\"\n        aria-label=\"flag\"\n        title={ title }\n        onClick={ onClick }\n      >{ content }</span>\n    )\n  }\n}","import React from 'react';\nimport { NumberColors } from '../../constant';\nexport default class CellFont extends React.Component {\n  renderColorfulContent (content, level) {\n    if (!level) {\n      level = Number(content)\n    }\n    switch (level) {\n      case 0:\n        return NumberColors.MINE_0;\n      case 1:\n        return NumberColors.MINE_1;\n      case 2:\n        return NumberColors.MINE_2;\n      case 3:\n        return NumberColors.MINE_3;\n      case 4:\n        return NumberColors.MINE_4;\n      case 5:\n        return NumberColors.MINE_5;\n      case 6:\n        return NumberColors.MINE_6;\n      case 7:\n        return NumberColors.MINE_7;\n      case 8:\n        return NumberColors.MINE_8;\n      default:\n        return NumberColors.MINE_0;\n    }\n  }\n  render () {\n    const { content } = this.props;\n    return (\n      <span style={{color: this.renderColorfulContent(content), fontWeight: 500}}>\n        { content }\n      </span>\n    )\n  }\n}","import React from 'react';\nimport { connect } from 'react-redux';\n// 工具\nimport { CellTypes, GameStatus } from '../../constant';\nimport { changeMatrix, changeStatus, runFailedMedia, runSuccessMedia } from '../../store/actions';\nimport { isSuccess, replaceAllCellStatus } from './helper';\nimport { Emojis } from '../../constant';\n// 组件\nimport Emoji from '../Emoji';\nimport CellFont from './CellFont';\nclass Cell extends React.Component {\n\n  renderCellContent (cell) {\n    const { status, isMine, value, isEmoji, emoji } = cell\n    switch (status) {\n      case CellTypes.CELL_NOT_REVEAL:\n        return (\n          <div className=\"block\"></div>\n        );\n      case CellTypes.CELL_NULL:\n        return (\n          <div className=\"revealed-block\">\n            <Emoji emoji={ isEmoji ? emoji : Emojis.MONKEY } cursor></Emoji>\n          </div>\n        );\n      case CellTypes.CELL_NUMBER:\n        return (\n          <div className=\"revealed-block\">\n            <CellFont content={ value }/>\n          </div>\n        );\n      case CellTypes.CELL_MINE:\n        return (\n          <div className=\"revealed-block\">\n            {\n              isMine ?\n              <Emoji emoji={ Emojis.MINE }></Emoji> :\n              <Emoji emoji={ Emojis.MONKEY }></Emoji>\n            }\n          </div>\n        );\n      case CellTypes.CELL_FLAG:\n        return (\n          <div className=\"block\">\n            <Emoji emoji={ Emojis.FLAG }></Emoji>\n          </div>\n        );\n      default:\n        return <div></div>\n    }\n  }\n  // 翻开方块\n  _reveal (event) {\n    event.preventDefault();\n    const { blockRevealed, cell, matrix, level, gameStatus } = this.props;\n    blockRevealed(cell, matrix, level, gameStatus);\n  }\n  // 标记方块\n  _flag (event) {\n    event.preventDefault();\n    const { blockFlagged, cell, matrix, level, gameStatus } = this.props;\n    blockFlagged(cell, matrix, level, gameStatus);\n  }\n\n  render () {\n    const { cell } = this.props;\n    return (\n      <div className=\"cell\"\n        onClick={ this._reveal.bind(this) } \n        onContextMenu={ this._flag.bind(this) }\n      >\n      {this.renderCellContent(cell)}\n    </div>\n    )\n  }\n}\n\n/* connect Cell到容器中 */\n\n// 获取所有的状态。映射到props\nconst mapStateToProps = (state) => state\n\n// 处理状态变更的方法。映射到props\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    blockRevealed: (cell, matrix, level, gameStatus) => {\n      // 游戏未开始 暂停、胜利、失败；或者当前方块被标记的情况下 不响应左击事件\n      // 新增：单元为纯图像不触发左击事件\n      if (\n        gameStatus === GameStatus.GAME_PAUSED ||\n        gameStatus === GameStatus.GAME_SUCCESS ||\n        gameStatus === GameStatus.GAME_FAILED ||\n        gameStatus === GameStatus.GAME_NOT_START ||\n        cell.status === CellTypes.CELL_FLAG ||\n        cell.isEmoji\n      ) {\n        return\n      }\n      // 若 戏空闲状态 变更为进行中\n      if (gameStatus === GameStatus.GAME_NOT_START) {\n        dispatch(changeStatus(GameStatus.GAME_ON));\n      }\n      // 处理cell状态变更。如果是踩雷，翻开所有的方块\n      const nextMatrix = replaceAllCellStatus(matrix, cell, level)\n      // 踩雷则游戏结束\n      if (cell.isMine) {\n        dispatch(changeStatus(GameStatus.GAME_FAILED));\n        runFailedMedia(dispatch, nextMatrix);\n        // 判断游戏是否成功\n      } else if (isSuccess(nextMatrix, level)) {\n        runSuccessMedia(dispatch, nextMatrix);\n        dispatch(changeStatus(GameStatus.GAME_SUCCESS));\n      }\n      dispatch(changeMatrix(nextMatrix));\n    },\n    blockFlagged: (cell, matrix, level, gameStatus) => {\n      // 游戏未开始，暂停、胜利、失败的情况下 不响应右击事件\n      // 新增：单元为纯图像不触发右击事件\n      if (\n        gameStatus === GameStatus.GAME_PAUSED ||\n        gameStatus === GameStatus.GAME_SUCCESS ||\n        gameStatus === GameStatus.GAME_FAILED ||\n        gameStatus === GameStatus.GAME_NOT_START ||\n        cell.isEmoji\n      ) {\n        return\n      }\n      // 若 戏空闲状态 变更为进行中\n      if (gameStatus === GameStatus.GAME_NOT_START) {\n        dispatch(changeStatus(GameStatus.GAME_ON));\n      }\n      // 处理cell状态变更。\n      const nextMatrix = replaceAllCellStatus(matrix, cell, level, true)\n      // 游戏成功\n      if (isSuccess(nextMatrix, level)) {\n        dispatch(changeStatus(GameStatus.GAME_SUCCESS));\n      }\n      dispatch(changeMatrix(nextMatrix));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cell)\n","import { failedMediaFrame, successMediaFrame } from '../../util';\nimport { changeMediaMatrix, changeMediaTimer } from './pure';\n\n// 播放图像\n// 原理\n// 1. 利用redux-thunk 分发异步dispath事件\n// 2. 设置并维护一个全局的视频控制器timer 该控制器可以在需要的时候用于清除视频\n// 3. 循环播放\n\n/**\n * 播放失败视频\n * @param {Function} dispatch \n * @param {Array} matrix \n * @param {Number} time \n */\nexport function runFailedMedia (dispatch, matrix, time = 40) {\n  dispatch(function (dispatch) {\n    const len = matrix.length\n    let prev = { rowIndex: len - 1, colIndex: 0, isNextLine: false, isPositive: true }\n    const timer = setInterval(() => {\n      if (!prev.isNextLine) {\n        const { rowIndex, colIndex, isPositive } = prev;\n        prev = failedMediaFrame(matrix, rowIndex, colIndex, isPositive);\n        dispatch(changeMediaMatrix(prev.matrix));\n        // 正向转为逆向\n        if (isPositive && !prev.isPositive) {\n          prev.rowIndex = 0\n          prev.colIndex = len - 1\n          prev.isNextLine = false\n        }\n        // 逆向转为正向\n        if (!isPositive && prev.isPositive) {\n          prev.rowIndex = len - 1\n          prev.colIndex = 0\n          prev.isNextLine = false\n        }\n\n      } else {\n        prev.isNextLine = false\n      }\n    }, time)\n    dispatch(changeMediaTimer(timer))\n  })\n}\n\n/**\n * 播放成功的视频\n * @param {Function} dispatch \n * @param {Array} matrix \n * @param {Number} time \n */\nexport function runSuccessMedia (dispatch, matrix, time = 40) {\n  dispatch(function (dispatch) {\n    const len = matrix.length\n    let prev = { rowIndex: len - 1, colIndex: 0, isNextLine: false, isPositive: true }\n    const timer = setInterval(() => {\n      if (!prev.isNextLine) {\n        const { rowIndex, colIndex, isPositive } = prev;\n        prev = successMediaFrame(matrix, rowIndex, colIndex, isPositive);\n        dispatch(changeMediaMatrix(prev.matrix));\n        // 正向转为逆向\n        if (isPositive && !prev.isPositive) {\n          prev.rowIndex = 0\n          prev.colIndex = len - 1\n          prev.isNextLine = false\n        }\n        // 逆向转为正向\n        if (!isPositive && prev.isPositive) {\n          prev.rowIndex = len - 1\n          prev.colIndex = 0\n          prev.isNextLine = false\n        }\n\n      } else {\n        prev.isNextLine = false\n      }\n    }, time)\n    dispatch(changeMediaTimer(timer))\n  })\n}\n","import React from 'react';\nimport Cell from '../Cell';\nexport default class Row extends React.Component {\n  render () {\n    const { row } = this.props;\n    return (\n      <div className=\"row\">\n        {\n          row.map((cell, index) => {\n            return (\n              <Cell cell={ cell } key={ index }></Cell>\n            )\n          })\n        }\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Row from '../Row';\nclass Matrix extends React.Component {\n  render () {\n    let { matrix } = this.props;\n    const { level, mediaMatrix } = this.props;\n    matrix = mediaMatrix || matrix;\n    return (\n      <div className=\"matrix\" style={{fontSize: [18, 16, 14, 12][level] + 'px'}}>\n        {\n          matrix.map((row, index) => {\n            return (\n              <Row row={ row } key={ index }></Row>\n            )\n          })\n        }\n      </div>\n    )\n  }\n}\n\n// 从state中映射matrix到Matrix组件\nconst mapStateToProps = (state) => {\n  return {\n    mediaMatrix: state.mediaMatrix,\n    matrix: state.matrix,\n    level: state.level\n  }\n}\n\nexport default connect(mapStateToProps)(Matrix)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Emojis, ClockStatus, GameStatus } from '../../constant';\n// 组件\nimport Emoji from '../Emoji';\nclass Clock extends React.Component {\n  timer;\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: 0\n    }\n  }\n  componentDidMount () {\n    this.timer = setInterval (() => {\n      const { clockStatus } = this.props;\n      if (clockStatus === ClockStatus.CONTINUE) {\n        this.setState({time: this.state.time + 1})\n      }\n    }, 1000)\n  }\n  componentWillUnmount () {\n    if (this.timer) {\n      clearInterval(this.timer)\n    }\n  }\n\n  resetClock(time = 0) {\n    this.setState({ time })\n  }\n\n  render () {\n    const { time } = this.state;\n    return (\n      <div className=\"line\">\n        <Emoji emoji={ Emojis.INFO_CLOCK }></Emoji>\n        <span>{ time } s</span>\n      </div>\n    )\n  }\n}\n\n/* connect */\n\nconst mapStateToProps = (state) => {\n  const status = state.gameStatus\n  let clockStatus = 0\n  switch (status) {\n    case (GameStatus.GAME_CONTINUED):\n    case (GameStatus.GAME_ON):\n      clockStatus = 1;\n      break;\n    default:\n      clockStatus = 0;\n  }\n  return { clockStatus }\n}\n\n\nexport default connect(mapStateToProps, null, null, { forwardRef: true })(Clock);","import React from 'react';\nimport { connect } from 'react-redux';\n// 工具\nimport { changeLevel, initMatrix, changeStatus, changeAnimationStatus, changeMediaTimer, changeMediaMatrix } from '../../store/actions';\nimport { mapLevel, GameStatus, Emojis } from '../../constant';\n// 组件\nimport Emoji from '../Emoji';\nimport Clock from '../Clock';\n\nclass Info extends React.Component {\n  constructor (props) {\n    super(props);\n    this.refClock = React.createRef();\n  }\n  // 【等级变更】响应\n  _levelChangeEvent (event) {\n    event.preventDefault();\n    const { levelChange, mediaTimer } = this.props;\n    levelChange(event, mediaTimer);\n  }\n\n  _levelClickEvent (event) {\n    event.preventDefault();\n    const { level, levelChange, mediaTimer } = this.props;\n    let value = level + 1\n    value = value > 3 ? 0 : value\n    levelChange({ target: { value }}, mediaTimer)\n  }\n\n  // 【重新开始】响应\n  _restart (event) {\n    event.preventDefault();\n    const { restart, level, mediaTimer } = this.props;\n    restart(level, mediaTimer);\n    this.refClock.current.resetClock(0);\n  }\n  // 【暂停】响应\n  _pause (event) {\n    event.preventDefault();\n    const { gameStatus, pause } = this.props;\n    pause(gameStatus);\n  }\n  // 确定是否使用动画\n  _toggleAnimation (event) {\n    event.preventDefault();\n    const { toggleAnimation, animationStatus } = this.props;\n    toggleAnimation(animationStatus);\n  }\n\n  // 渲染游戏状态\n  renderGameStatus (gameStatus) {\n    switch (gameStatus) {\n      case GameStatus.GAME_NOT_START:\n        return Emojis.GAME_IDLE;\n      case GameStatus.GAME_PAUSED:\n        return Emojis.GAME_PAUSED;\n      case GameStatus.GAME_FAILED:\n        return Emojis.GAME_FAILED;\n      case GameStatus.GAME_SUCCESS:\n        return Emojis.GAME_SUCCESS;\n      case GameStatus.GAME_ON:\n      case GameStatus.GAME_CONTINUED:\n      default:\n        return Emojis.GAME_PLAYING;\n    }\n  }\n\n  // 渲染按钮文字\n  renderPauseButtonContent (status) {\n    switch (status) {\n      case GameStatus.GAME_PAUSED:\n        return 'Continue';\n      default:\n        return 'Pause';\n    }\n  }\n\n  // 渲染背景动画\n  renderAnimationButtonContent (status) {\n    if (status) {\n      return 'Static'\n    } else {\n      return 'Dynamic'\n    }\n  }\n\n  // 渲染开始按钮\n  renderRestartButtonContent (status) {\n    if (status === GameStatus.GAME_NOT_START) {\n      return 'Start'\n    } else {\n      return 'Restart'\n    }\n  }\n\n  // 渲染等级emoji\n  renderLevelEmoji (level) {\n    return [Emojis.GAME_EASY, Emojis.GAME_MEDIUM, Emojis.GAME_HARD, Emojis.GAME_SUPER][level];\n  }\n\n  render() {\n    const { level, gameStatus, mine, animationStatus } = this.props\n    return (\n      <div className=\"info\">\n        {\n          /* \n          去除这个select框 用点击emoji代替\n          <div className=\"line\">\n            <Emoji emoji={ Emojis.INFO_LEVEL_CHOICE }></Emoji>\n            <select name=\"levelSelector\" value={level} onChange={ this._levelChangeEvent.bind(this) }>\n              <option className=\"option\" value=\"0\">{ Emojis.GAME_EASY.content }</option>\n              <option className=\"option\" value=\"1\">{ Emojis.GAME_MEDIUM.content }</option>\n              <option className=\"option\" value=\"2\">{ Emojis.GAME_HARD.content }</option>\n              <option className=\"option\" value=\"3\">{ Emojis.GAME_SUPER.content }</option>\n            </select>\n          </div> \n          */\n        }\n        <div className=\"line\">\n          <Emoji emoji={ Emojis.INFO_LEVEL }></Emoji>\n          <Emoji emoji={ this.renderLevelEmoji(level)} onClick={ this._levelClickEvent.bind(this) } css=\"content-right\"></Emoji>\n        </div>\n        { \n          <React.Fragment>\n            <div className=\"line\">\n              <Emoji emoji={ Emojis.INFO_GAME_BLOCK }></Emoji>\n              <span>{ mine.notRevealed }</span>\n            </div>\n            <div className=\"line\">\n              <Emoji emoji={ Emojis.FLAG }></Emoji>\n              <span>{ mine.flagged }</span>\n            </div>\n            <div className=\"line\">\n              <Emoji emoji={ Emojis.MINE }></Emoji>\n              <span>{ mapLevel[level].mineCount }</span>\n            </div>\n          </React.Fragment>\n        }\n        <div className=\"line\">\n          <Emoji emoji={ Emojis.INFO_GAME_STATUS }></Emoji>\n          { <Emoji emoji={ this.renderGameStatus(gameStatus) } css=\"content-right\"></Emoji> }\n        </div>\n        <Clock ref={this.refClock}/>\n        <div className=\"line\">\n          <button className=\"animation\" onClick={ this._toggleAnimation.bind(this) }>{ this.renderAnimationButtonContent(animationStatus) }</button>\n          <button className=\"pause\" onClick={ this._pause.bind(this) }>{ this.renderPauseButtonContent(gameStatus) }</button>\n          <button className=\"restart\" onClick={ this._restart.bind(this) }>{ this.renderRestartButtonContent(gameStatus) }</button>\n        </div>\n        <div className=\"line\">\n          <a className=\"source-code\" href=\"https://github.com/WanderHuang/react-minesweeper-sweep-it\">Source Code</a>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return state\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    levelChange: ({ target }, mediaTimer) => {\n      const level = Number(target.value)\n      // 关闭视频\n      clearInterval(mediaTimer)\n      dispatch(changeMediaTimer(null))\n      dispatch(changeMediaMatrix(null))\n      // 修改游戏难度\n      dispatch(changeLevel(level));\n      // 初始化游戏矩阵\n      dispatch(initMatrix(level));\n      // 修改游戏状态\n      dispatch(changeStatus(GameStatus.GAME_NOT_START));\n    },\n    restart: (level, mediaTimer) => {\n      // 关闭视频\n      clearInterval(mediaTimer)\n      dispatch(changeMediaTimer(null))\n      dispatch(changeMediaMatrix(null))\n      // 重置矩阵\n      dispatch(initMatrix(level));\n      // 重置游戏状态\n      dispatch(changeStatus(GameStatus.GAME_ON));\n    },\n    pause: (gameStatus) => {\n      if (gameStatus === GameStatus.GAME_PAUSED) {\n        dispatch(changeStatus(GameStatus.GAME_CONTINUED))\n      }\n      if (\n        gameStatus === GameStatus.GAME_CONTINUED ||\n        gameStatus === GameStatus.GAME_ON\n      ) {\n        dispatch(changeStatus(GameStatus.GAME_PAUSED))\n      }\n    },\n    toggleAnimation: (animation) => {\n      dispatch(changeAnimationStatus(!animation))\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Info)","import React from 'react';\nimport { Emojis } from '../../constant';\nimport Emoji from '../Emoji';\nexport default class Description extends React.Component {\n  render () {\n    return (\n      <section>\n        <div className=\"title\">\n          <span>Description:</span>\n        </div>\n        <div className=\"simple-description\">\n          <span>Minesweeper is a classic windows game,</span>\n          <span>I moved it to the browser,</span>\n          <span>I wish you will feel relax after a day work with it.</span>\n        </div>\n        <div className=\"content\">\n          <div className=\"line\">\n            <span>* </span>\n            <span>Click </span>\n            <Emoji emoji={ Emojis.GAME_MEDIUM } />\n            <span> can change the degree of difficulty.</span>\n          </div>\n          <div className=\"line\">\n            <span>* </span>\n            <span>Click </span>\n            <span className=\"pink\">Static</span>\n            <span> to toggle background between `static` and `dynamic`</span>\n          </div>\n          <div className=\"line\">\n            <span>* </span>\n            <span>Click </span>\n            <span className=\"cyan\">Pause</span>\n            <span> to stop/continue your Game</span>\n          </div>\n          <div className=\"line\">\n            <span>* </span>\n            <span>Click </span>\n            <span className=\"green\">Start</span>\n            <span> to start your game.</span>\n          </div>\n          <div className=\"line\">\n            <span>* Left mouse click: reveal one cell.</span>\n          </div>\n          <div className=\"line\">\n            <span>* Right mouse click: mark one cell if you think it is a mine.</span>\n          </div>\n          <div className=\"line\">\n            <span>* </span>\n            <Emoji emoji={ Emojis.INFO_NUMBER }></Emoji>\n            <span> : means there are `n` mines surround it.</span>\n          </div>\n          <div className=\"line\">\n            <span>* </span>\n            <Emoji emoji={ Emojis.MONKEY }></Emoji>\n            <span> : means safe area.</span>\n          </div>\n          <div className=\"line\">\n            <span>* </span>\n            <Emoji emoji={ Emojis.INFO_LEVEL }></Emoji>\n            <span> : means current `level` of your game.Simple, Medium, Hard, Super is supplied.</span>\n          </div>\n          <div className=\"line\">\n            <span>* </span>\n            <Emoji emoji={ Emojis.INFO_GAME_BLOCK }></Emoji>\n            <span> : means total `n` cells is supplied.</span>\n          </div>\n          <div className=\"line\">\n            <span>* </span>\n            <Emoji emoji={ Emojis.FLAG }></Emoji>\n            <span> : means `n` flag is used.</span>\n          </div>\n          <div className=\"line\">\n            <span>* </span>\n            <Emoji emoji={ Emojis.MINE }></Emoji>\n            <span> : means total `n` mines under the cells.</span>\n          </div>\n          <div className=\"line\">\n            <span>* </span>\n            <Emoji emoji={ Emojis.INFO_GAME_STATUS }></Emoji>\n            <span> : shows current game status.</span>\n          </div>\n          <div className=\"line\">\n            <span>* </span>\n            <Emoji emoji={ Emojis.INFO_CLOCK }></Emoji>\n            <span> : shows how much time you used to `sweep it`!</span>\n          </div>\n        </div>\n      </section>\n    )\n  }\n}","import React from 'react';\nimport Matrix from '../Matrix';\nimport Info from '../Info';\nimport Description from '../Description';\nexport default class Board extends React.Component {\n  render () {\n    return (\n      <div className=\"board\">\n        <Info></Info>\n        <div className=\"zone\">\n          <Matrix />\n        </div>\n        <Description />\n      </div>\n    )\n  }\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport './App.scss';\nimport { Animations } from './constant';\nimport Board from './components/Board';\nclass App extends React.Component {\n  render() {\n    const { animationStatus } = this.props;\n    const index = animationStatus ? 1 : 0;\n    return (\n      <div className=\"app\" style={ Animations[index] }>\n        <h1>Minesweeper: Sweep it, Bro!</h1>\n        <div className=\"boardArea\">\n          <Board></Board>\n        </div>\n      </div>\n    )\n  }\n}\n\n/* connect */\nconst mapStateToProps = (state) => {\n  return {\n    animationStatus: state.animationStatus\n  }\n}\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     displayRandomMedia: (level = 3, time = 1000) => {\n//       return setInterval(() => {\n//         dispatch(changeMediaMatrix(randomMediaFrame(level)));\n//       }, time)\n//     },\n//     displayFailedMedia: (matrix, time = 1000) => {\n//       dispatch(function (dispatch) {\n//         let prev = { i: 0, j: 0 }\n//         const timer =setInterval(() => {\n//           const { i, j } = prev;\n//           prev = failedMediaFrame(matrix, i, j);\n//           dispatch(changeMediaMatrix(prev.matrix));\n//           if (i > matrix.length - 1 && j > matrix.length - 1) {\n//             clearInterval(timer)\n//           }\n//         }, time)\n//       });\n//     },\n//     displaySuccessMedia: (level = 3, time = 1000) => {\n//       return setInterval(() => {\n//         dispatch(changeMediaMatrix(randomMediaFrame(level)));\n//       }, time)\n//     },\n//     displayPausedMedia: (level = 3, time = 1000) => {\n//       return setInterval(() => {\n//         dispatch(changeMediaMatrix(randomMediaFrame(level)));\n//       }, time)\n//     },\n//     clearMedia: (timer, mediaMatrix) => {\n//       if (timer) {\n//         clearInterval(timer)\n//         if (mediaMatrix) {\n//           dispatch(changeMediaMatrix(null));\n//         }\n//       }\n//     }\n//   }\n// }\n\nexport default connect(mapStateToProps)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport reducers from './store/reducers';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, applyMiddleware(logger, thunk))\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}