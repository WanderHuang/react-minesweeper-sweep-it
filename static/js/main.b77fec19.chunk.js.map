{"version":3,"sources":["store/types.js","constant/index.js","util/index.js","store/reducers/matrix/index.js","store/reducers/level/index.js","store/reducers/status/index.js","store/reducers/mine/index.js","store/reducers/clock/index.js","store/reducers/animation/index.js","store/reducers/index.js","store/reducers/media/index.js","store/actions/pure.js","components/Cell/helper.js","components/Emoji/index.js","components/Cell/CellFont.js","components/Cell/index.js","store/actions/async.js","components/Row/index.js","components/Matrix/index.js","components/Clock/index.js","components/Info/index.js","components/Description/index.js","components/Board/index.js","App.js","serviceWorker.js","index.js"],"names":["CHANGE_LEVEL","CHANGE_MATRIX","CHANGE_STATUS","INIT_MATRIX","CHANGE_CLOCK_STATUS","CHANGE_ANIMATION_STATUS","CHANGE_MEDIA","CHANGE_MEDIA_TIMER","mapLevel","baseCount","mineCount","CellTypes","GameStatus","GameLevel","ClockStatus","Emojis","GAME_EASY","content","description","GAME_MEDIUM","GAME_HARD","GAME_SUPER","INFO_LEVEL_CHOICE","INFO_LEVEL","INFO_GAME_STATUS","INFO_GAME_BLOCK","INFO_CLOCK","MONKEY","FLAG","MINE","GAME_FAILED","GAME_PLAYING","GAME_PAUSED","GAME_IDLE","GAME_SUCCESS","INFO_COW","INFO_BEAR","INFO_NUMBER","NumberColors","Animations","createEmptyMatrix","level","matrix","i","row","j","push","rowIndex","colIndex","status","isMine","value","traverseMatrix","cell","around","mineStatistics","notRevealed","flagged","forEach","failedMediaFrame","currentRowIndex","currentColIndex","isPositive","isNextLine","len","length","cacheStatus","isEmoji","emoji","JSON","parse","stringify","successMediaFrame","number","initMatrix","block","initCellValues","mines","x","Math","random","y","findIndex","mine","initMinesToMatrix","state","action","type","payload","initState","gameStatus","initMine","pow","clockStatus","animationStatus","reducers","combineReducers","mediaMatrix","mediaTimer","changeMatrix","types","changeStatus","changeMediaMatrix","changeMediaTimer","isSuccess","replaceAllCellStatus","onContextMenu","nextMatrix","nextStatus","revealEmptyCell","revealAllCell","isNullCell","Emoji","this","props","title","css","onClick","cursor","className","style","role","aria-label","React","Component","CellFont","Number","color","renderColorfulContent","fontWeight","Cell","event","preventDefault","blockRevealed","blockFlagged","_reveal","bind","_flag","renderCellContent","connect","dispatch","time","prev","timer","setInterval","runFailedMedia","runSuccessMedia","Row","map","index","key","Matrix","fontSize","Clock","setState","clearInterval","forwardRef","Info","refClock","createRef","levelChange","target","restart","current","resetClock","pause","toggleAnimation","renderLevelEmoji","_levelClickEvent","Fragment","renderGameStatus","ref","_toggleAnimation","renderAnimationButtonContent","_pause","renderPauseButtonContent","_restart","renderRestartButtonContent","animation","Description","Board","App","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","logger","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b77fec19.chunk.js","sourcesContent":["// 修改level值\r\nexport const CHANGE_LEVEL = 'CHANGE_LEVEL'\r\n// 修改matrix\r\nexport const CHANGE_MATRIX = 'CHANGE_MATRIX'\r\n// 修改游戏状态\r\nexport const CHANGE_STATUS = 'CHANGE_STATUS'\r\n// 初始化matrix\r\nexport const INIT_MATRIX = 'INIT_MATRIX'\r\n// 切换时钟状态\r\nexport const CHANGE_CLOCK_STATUS = 'CHANGE_CLOCK_STATUS'\r\n// 切换动画状态\r\nexport const CHANGE_ANIMATION_STATUS = 'CHANGE_ANIMATION_STATUS'\r\n// 切换视频状态\r\nexport const CHANGE_MEDIA = 'CHANGE_MEDIA'\r\n// 切换视频控制器\r\nexport const CHANGE_MEDIA_TIMER = 'CHANGE_MEDIA_TIMER'","/**\r\n * 等级分布\r\n * 0 - easy   - 8 * 8   - 10\r\n * 1 - medium - 12 * 12 - 20\r\n * 2 - hard   - 16 * 16 - 30\r\n * 3 - super  - 20 * 20 - 40\r\n */\r\nexport const mapLevel = [\r\n  {\r\n    // 0.08\r\n    baseCount: 8,\r\n    mineCount: 10\r\n  },\r\n  {\r\n    // 0.11\r\n    baseCount: 15,\r\n    mineCount: 25\r\n  },\r\n  {\r\n    // 0.15\r\n    baseCount: 16,\r\n    mineCount: 40\r\n  },\r\n  {\r\n    // 0.2\r\n    baseCount: 20,\r\n    mineCount: 80\r\n  }\r\n]\r\n/**\r\n * 定义方块状态\r\n * 0 未翻开\r\n * 1 翻开 且为空\r\n * 2 翻开 且为数字\r\n * 3 翻开 且为地雷\r\n * 4 未翻开 且被标记\r\n * 9 翻开 且展示emoji图像\r\n */\r\nexport const CellTypes = {\r\n  CELL_NOT_REVEAL: 0,\r\n  CELL_NULL: 1,\r\n  CELL_NUMBER: 2,\r\n  CELL_MINE: 3,\r\n  CELL_FLAG: 4,\r\n  CELL_EMOJI: 9\r\n}\r\n\r\n/**\r\n * 定义游戏状态\r\n * 0 未开始\r\n * 1 游戏开始\r\n * 2 游戏暂停\r\n * 3 游戏继续\r\n * 4 游戏失败\r\n * 5 游戏成功\r\n */\r\nexport const GameStatus = {\r\n  GAME_NOT_START: 0,\r\n  GAME_ON: 1,\r\n  GAME_PAUSED: 2,\r\n  GAME_CONTINUED: 3,\r\n  GAME_FAILED: 4,\r\n  GAME_SUCCESS: 5\r\n}\r\n\r\n/**\r\n * 定义游戏等级\r\n * 0 简单\r\n * 1 中级\r\n * 2 困难\r\n * 3 超难\r\n */\r\nexport const GameLevel = {\r\n  SIMPLE: 0,\r\n  MEDIUM: 1,\r\n  HARD: 2,\r\n  SUPER: 3\r\n}\r\n\r\n/**\r\n * 定义时钟状态\r\n * 0 停止\r\n * 1 继续\r\n */\r\nexport const ClockStatus = {\r\n  STOP: 0,\r\n  CONTINUE: 1\r\n}\r\n\r\n/**\r\n * 系统级Emoji定义\r\n */\r\nexport const Emojis = {\r\n  GAME_EASY: {\r\n    content: '😀',\r\n    description: 'Easy'\r\n  },\r\n  GAME_MEDIUM: {\r\n    content: '😃',\r\n    description: 'Medium'\r\n  },\r\n  GAME_HARD: {\r\n    content: '😅',\r\n    description: 'Hard'\r\n  },\r\n  GAME_SUPER: {\r\n    content: '😨',\r\n    description: 'Super'\r\n  },\r\n  INFO_LEVEL_CHOICE: {\r\n    content: '🎲',\r\n    description: 'Level choice'\r\n  },\r\n  INFO_LEVEL: {\r\n    content: '🌡️',\r\n    description: 'Current Level'\r\n  },\r\n  INFO_GAME_STATUS: {\r\n    content: '🕹️',\r\n    description: 'Game Status'\r\n  },\r\n  INFO_GAME_BLOCK: {\r\n    content: '⬛',\r\n    description: 'Blocks'\r\n  },\r\n  INFO_CLOCK: {\r\n    content: '🕒',\r\n    description: 'time(s)'\r\n  },\r\n  MONKEY: {\r\n    content: '🙈',\r\n    description: 'Monkey see nothing'\r\n  },\r\n  FLAG: {\r\n    content: '⛳',\r\n    description: 'Flagged Block'\r\n  },\r\n  MINE: {\r\n    content: '💣',\r\n    description: 'Mine'\r\n  },\r\n  GAME_FAILED: {\r\n    content: '☠️',\r\n    description: 'Game Over'\r\n  },\r\n  GAME_PLAYING: {\r\n    content: '🎮',\r\n    description: 'On Game'\r\n  },\r\n  GAME_PAUSED: {\r\n    content: '⏸️',\r\n    description: 'Paused'\r\n  },\r\n  GAME_IDLE: {\r\n    content: '💤',\r\n    description: 'Idle'\r\n  },\r\n  GAME_SUCCESS: {\r\n    content: '🙌',\r\n    description: 'Game Success'\r\n  },\r\n  INFO_COW: {\r\n    content: '🐮',\r\n    description: 'Cow'\r\n  },\r\n  INFO_BEAR: {\r\n    content: '🍺',\r\n    description: 'Cow'\r\n  },\r\n  INFO_NUMBER: {\r\n    content: '5️⃣',\r\n    description: 'Number'\r\n  }\r\n}\r\n\r\nexport const NumberColors = {\r\n  MINE_0: '#000000',\r\n  MINE_1: '#00CCFF',\r\n  MINE_2: '#00CC33',\r\n  MINE_3: '#FF9966',\r\n  MINE_4: '#0000FF',\r\n  MINE_5: '#9900FF',\r\n  MINE_6: '#CC0099',\r\n  MINE_7: '#000099',\r\n  MINE_8: '#FF0000'\r\n}\r\n\r\n/**\r\n * 定义动画\r\n */\r\nexport const Animations = [\r\n  {\r\n    'backgroundImage': 'linear-gradient(-20deg, #e9defa 0%, #fbfcdb 100%)'\r\n  },\r\n  {\r\n    'animation': 'transition-bg 10s infinite reverse'\r\n  }\r\n]","import { mapLevel, CellTypes, Emojis } from '../constant'\r\n\r\n/**\r\n * 判断是否是偶数\r\n * @param {Number} number \r\n */\r\nfunction isEvenNumber(number) {\r\n  return number % 2 === 0\r\n}\r\n\r\n/**\r\n * 初始化一个空二维数组\r\n * @param { Number } level 当前等级\r\n */\r\nexport const createEmptyMatrix = (level = 0) => {\r\n  const { baseCount } = mapLevel[level];\r\n  const matrix = [];\r\n  for (let i = 0; i < baseCount; i++) {\r\n    const row = []\r\n    for (let j = 0; j < baseCount; j++) {\r\n      row.push({\r\n        rowIndex: i,\r\n        colIndex: j,\r\n        status: CellTypes.CELL_NOT_REVEAL,\r\n        isMine: false,\r\n        value: 0\r\n      })\r\n    }\r\n    matrix.push(row);\r\n  }\r\n  return matrix\r\n}\r\n\r\n/**\r\n * 初始化地雷矩阵\r\n * @param { Array } matrix 游戏矩阵\r\n * @param { Number } level 游戏等级\r\n */\r\nexport const initMinesToMatrix = (matrix, level) => {\r\n  const { baseCount, mineCount } = mapLevel[level];\r\n  const mines = [];\r\n  while(mines.length < mineCount) {\r\n    const x = Math.random() * baseCount | 0;\r\n    const y = Math.random() * baseCount | 0;\r\n    const has = mines.findIndex(mine => mine.x === x && mine.y === y);\r\n    if (has < 0) {\r\n      mines.push({ x, y });\r\n    }\r\n  }\r\n  for (let i = 0; i < mineCount; i++) {\r\n    const { x, y } = mines[i];\r\n    matrix[x][y].isMine = true;\r\n  }\r\n  return matrix\r\n}\r\n\r\n/**\r\n * 给每个单元格赋值\r\n * @param { Array } matrix 游戏矩阵\r\n * @param { number } level 游戏等级\r\n */\r\nexport const initCellValues = (matrix, level) => {\r\n  matrix.forEach((row) => {\r\n    row.forEach((cell) => {\r\n      if (!cell.isMine) {\r\n        const around = traverseMatrix(matrix, cell, level);\r\n        around.forEach((block) => {\r\n          if (block.isMine) {\r\n            cell.value++\r\n          }\r\n        })\r\n      }\r\n    })\r\n  })\r\n  return matrix;\r\n};\r\n\r\n/**\r\n * 遍历一个单元的周围\r\n * @param {*} matrix 游戏矩阵\r\n * @param {*} cell 一个单元\r\n * @param {*} level 游戏等级\r\n */\r\nexport const traverseMatrix = (matrix, cell, level) => {\r\n  const { baseCount } = mapLevel[level]\r\n  const { rowIndex, colIndex } = cell;\r\n  const around = [];\r\n  if (rowIndex > 0) {\r\n    around.push(matrix[rowIndex - 1][colIndex]);\r\n  }\r\n  if (rowIndex < baseCount - 1) {\r\n    around.push(matrix[rowIndex + 1][colIndex]);\r\n  }\r\n  if (colIndex > 0) {\r\n    around.push(matrix[rowIndex][colIndex - 1]);\r\n  }\r\n  if (colIndex < baseCount - 1) {\r\n    around.push(matrix[rowIndex][colIndex + 1]);\r\n  }\r\n  if (rowIndex > 0 && colIndex > 0) {\r\n    around.push(matrix[rowIndex - 1][colIndex - 1]);\r\n  }\r\n  if (rowIndex > 0 && colIndex < baseCount - 1) {\r\n    around.push(matrix[rowIndex - 1][colIndex + 1]);\r\n  }\r\n  if (rowIndex < baseCount - 1 && colIndex < baseCount - 1) {\r\n    around.push(matrix[rowIndex + 1][colIndex + 1]);\r\n  }\r\n  if (rowIndex < baseCount - 1 && colIndex > 0) {\r\n    around.push(matrix[rowIndex + 1][colIndex - 1]);\r\n  }\r\n  return around;\r\n}\r\n\r\n/**\r\n * 地雷状态统计\r\n * @param {Array} matrix 游戏矩阵\r\n */\r\nexport const mineStatistics = (matrix) => {\r\n  let notRevealed = 0\r\n  let flagged = 0\r\n  matrix.forEach((row) => {\r\n    row.forEach((cell) => {\r\n      if (cell.status === CellTypes.CELL_NOT_REVEAL) {\r\n        notRevealed++\r\n      }\r\n      if (cell.status === CellTypes.CELL_FLAG) {\r\n        flagged++\r\n      }\r\n    })\r\n  })\r\n  return {\r\n    notRevealed,\r\n    flagged\r\n  }\r\n}\r\n\r\n/**\r\n * 产生随机的emoji矩阵\r\n * @param {Number} level \r\n */\r\nexport const randomMediaFrame = (level = 3) => {\r\n  const matrix = createEmptyMatrix(level);\r\n  const emojiArray = Object.keys(Emojis);\r\n  const emojiCount = emojiArray.length;\r\n  return matrix.map((row) => {\r\n    return row.map((cell) => {\r\n      const random = Math.random() * emojiCount | 0\r\n      return {\r\n        rowIndex: cell.rowIndex,\r\n        colIndex: cell.colIndex,\r\n        status: CellTypes.CELL_NULL,\r\n        isMine: false,\r\n        isEmoji: true,\r\n        emoji: Emojis[emojiArray[random]],\r\n        value: 0\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * 产生一帧失败的矩阵\r\n * @param {Number} level \r\n */\r\nexport const failedMediaFrame = (matrix, currentRowIndex, currentColIndex, isPositive) => {\r\n  let isNextLine = false;\r\n  const len = matrix.length;\r\n  if (isPositive) {\r\n    if (currentRowIndex >= 0) {\r\n      const {\r\n        rowIndex,\r\n        colIndex,\r\n        status,\r\n        isMine,\r\n        value\r\n      } = matrix[currentRowIndex][currentColIndex];\r\n\r\n      matrix[currentRowIndex][currentColIndex] = {\r\n        rowIndex,\r\n        colIndex,\r\n        cacheStatus: status,\r\n        status: CellTypes.CELL_NULL,\r\n        isMine,\r\n        isEmoji: true,\r\n        emoji: Emojis.GAME_FAILED,\r\n        value\r\n      }\r\n\r\n      currentColIndex++;\r\n      if (currentColIndex >= len) {\r\n        currentColIndex = 0;\r\n        currentRowIndex--;\r\n        isNextLine = true;\r\n      }\r\n    } else {\r\n      isPositive = false;\r\n    }\r\n  } else {\r\n    if (currentRowIndex < len) {\r\n      const {\r\n        rowIndex,\r\n        colIndex,\r\n        cacheStatus,\r\n        isMine,\r\n        emoji,\r\n        value\r\n      } = matrix[currentRowIndex][currentColIndex];\r\n\r\n      matrix[currentRowIndex][currentColIndex] = {\r\n        rowIndex,\r\n        colIndex,\r\n        cacheStatus,\r\n        status: cacheStatus,\r\n        isMine,\r\n        isEmoji: false,\r\n        emoji,\r\n        value\r\n      }\r\n\r\n      currentColIndex--;\r\n      if (currentColIndex < 0) {\r\n        currentColIndex = len - 1;\r\n        currentRowIndex++;\r\n        isNextLine = true;\r\n      }\r\n    } else {\r\n      isPositive = true;\r\n    }\r\n  }\r\n  return {\r\n    matrix: JSON.parse(JSON.stringify(matrix)),\r\n    rowIndex: currentRowIndex,\r\n    colIndex: currentColIndex,\r\n    isNextLine,\r\n    isPositive\r\n  }\r\n}\r\n\r\n/**\r\n * 产生一帧成功的矩阵\r\n * @param {Number} level \r\n */\r\nexport const successMediaFrame = (matrix, currentRowIndex, currentColIndex, isPositive) => {\r\n  let isNextLine = false;\r\n  const len = matrix.length;\r\n  if (isPositive) {\r\n    if (currentRowIndex >= 0) {\r\n      const {\r\n        rowIndex,\r\n        colIndex,\r\n        status,\r\n        isMine,\r\n        value\r\n      } = matrix[currentRowIndex][currentColIndex];\r\n\r\n      matrix[currentRowIndex][currentColIndex] = {\r\n        rowIndex,\r\n        colIndex,\r\n        cacheStatus: status,\r\n        status: CellTypes.CELL_NULL,\r\n        isMine,\r\n        isEmoji: true,\r\n        emoji: isEvenNumber(currentColIndex) ? Emojis.INFO_COW : Emojis.INFO_BEAR,\r\n        value\r\n      }\r\n\r\n      currentColIndex++;\r\n      if (currentColIndex >= len) {\r\n        currentColIndex = 0;\r\n        currentRowIndex--;\r\n        isNextLine = true;\r\n      }\r\n    } else {\r\n      isPositive = false;\r\n    }\r\n  } else {\r\n    if (currentRowIndex < len) {\r\n      const {\r\n        rowIndex,\r\n        colIndex,\r\n        cacheStatus,\r\n        isMine,\r\n        emoji,\r\n        value\r\n      } = matrix[currentRowIndex][currentColIndex];\r\n\r\n      matrix[currentRowIndex][currentColIndex] = {\r\n        rowIndex,\r\n        colIndex,\r\n        cacheStatus,\r\n        status: cacheStatus,\r\n        isMine,\r\n        isEmoji: false,\r\n        emoji,\r\n        value\r\n      }\r\n\r\n      currentColIndex--;\r\n      if (currentColIndex < 0) {\r\n        currentColIndex = len - 1;\r\n        currentRowIndex++;\r\n        isNextLine = true;\r\n      }\r\n    } else {\r\n      isPositive = true;\r\n    }\r\n  }\r\n  return {\r\n    matrix: JSON.parse(JSON.stringify(matrix)),\r\n    rowIndex: currentRowIndex,\r\n    colIndex: currentColIndex,\r\n    isNextLine,\r\n    isPositive\r\n  }\r\n}\r\n","import { CHANGE_MATRIX, INIT_MATRIX } from '../../types';\r\nimport { createEmptyMatrix, initMinesToMatrix, initCellValues }from '../../../util';\r\nimport { GameLevel } from '../../../constant'\r\n\r\nconst initMatrix = (level) => {\r\n  const empty = createEmptyMatrix(level)\r\n  const withMines = initMinesToMatrix(empty, level);\r\n  const withValues = initCellValues(withMines, level);\r\n  return withValues\r\n}\r\n\r\nconst matrix = (state = initMatrix(GameLevel.MEDIUM), action) => {\r\n  switch(action.type) {\r\n    case CHANGE_MATRIX:\r\n      return action.payload;\r\n    case INIT_MATRIX:\r\n      return initMatrix(action.payload);\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nexport default matrix;","import { CHANGE_LEVEL } from '../../types';\r\nimport { GameLevel } from '../../../constant';\r\n\r\nconst initState = GameLevel.MEDIUM;\r\n\r\nconst level = (state = initState, action) => {\r\n  switch(action.type) {\r\n    case CHANGE_LEVEL: {\r\n      return action.payload;\r\n    }\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nexport default level;","import { CHANGE_STATUS } from '../../types';\r\n\r\nconst initState = 0;\r\n\r\nconst gameStatus = (state = initState, action) => {\r\n  switch(action.type) {\r\n    case CHANGE_STATUS: {\r\n      return action.payload;\r\n    }\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nexport default gameStatus;","import { CHANGE_MATRIX } from '../../types';\r\nimport { mineStatistics } from '../../../util';\r\nimport { mapLevel } from '../../../constant'\r\n\r\nconst initMine = (level) => {\r\n  return {\r\n    notRevealed: Math.pow(mapLevel[level].baseCount, 2),\r\n    flagged: 0\r\n  }\r\n}\r\n\r\nconst mine = (state = initMine(0), action) => {\r\n  switch(action.type) {\r\n    case CHANGE_MATRIX:\r\n      return mineStatistics(action.payload);\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nexport default mine;","import { CHANGE_CLOCK_STATUS } from '../../types';\r\n\r\nconst initState = 0;\r\n\r\nconst clockStatus = (state = initState, action) => {\r\n  switch(action.type) {\r\n    case CHANGE_CLOCK_STATUS: {\r\n      return action.payload;\r\n    }\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nexport default clockStatus;","import { CHANGE_ANIMATION_STATUS } from '../../types';\r\n\r\nconst initState = true;\r\n\r\nconst animationStatus = (state = initState, action) => {\r\n  switch(action.type) {\r\n    case CHANGE_ANIMATION_STATUS: {\r\n      return action.payload;\r\n    }\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nexport default animationStatus;","import { combineReducers } from 'redux';\r\nimport matrix from './matrix';\r\nimport level from './level';\r\nimport gameStatus from './status';\r\nimport mine from './mine';\r\nimport clockStatus from './clock';\r\nimport animationStatus from './animation';\r\nimport { mediaMatrix, mediaTimer } from './media';\r\n\r\nconst reducers = combineReducers({\r\n  matrix,\r\n  level,\r\n  gameStatus,\r\n  mine,\r\n  clockStatus,\r\n  animationStatus,\r\n  mediaMatrix,\r\n  mediaTimer\r\n})\r\n\r\nexport default reducers","import { CHANGE_MEDIA, CHANGE_MEDIA_TIMER } from '../../types';\r\n\r\nconst initMatrix = null;\r\nconst initTimer = null\r\n\r\nexport const mediaMatrix = (state = initMatrix, action) => {\r\n  switch(action.type) {\r\n    case CHANGE_MEDIA:\r\n      return action.payload;\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nexport const mediaTimer = (state = initTimer, action) => {\r\n  switch(action.type) {\r\n    case CHANGE_MEDIA_TIMER:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}","import * as types from '../types';\r\n\r\nexport function changeLevel (payload) {\r\n  return {\r\n    type: types.CHANGE_LEVEL,\r\n    payload\r\n  }\r\n}\r\nexport function changeMatrix (payload) {\r\n  return {\r\n    type: types.CHANGE_MATRIX,\r\n    payload\r\n  }\r\n}\r\n\r\nexport function initMatrix (payload) {\r\n  return {\r\n    type: types.INIT_MATRIX,\r\n    payload\r\n  }\r\n}\r\n\r\nexport function changeStatus (payload) {\r\n  return {\r\n    type: types.CHANGE_STATUS,\r\n    payload\r\n  }\r\n}\r\n\r\nexport function resetClock (payload) {\r\n  return {\r\n    type: types.CHANGE_CLOCK_STATUS,\r\n    payload\r\n  }\r\n}\r\n\r\nexport function changeAnimationStatus (payload) {\r\n  return {\r\n    type: types.CHANGE_ANIMATION_STATUS,\r\n    payload\r\n  }\r\n}\r\n\r\nexport function changeMediaMatrix (payload) {\r\n  return {\r\n    type: types.CHANGE_MEDIA,\r\n    payload\r\n  }\r\n}\r\n\r\nexport function changeMediaTimer (payload) {\r\n  return {\r\n    type: types.CHANGE_MEDIA_TIMER,\r\n    payload\r\n  }\r\n}","import { CellTypes } from '../../constant'\r\nimport { traverseMatrix } from '../../util'\r\n/**\r\n * 判断游戏是否成功\r\n * @param {*} matrix 游戏矩阵\r\n * @param {*} level 游戏等级\r\n */\r\nexport const isSuccess = (matrix) => {\r\n  for (let i = 0; i < matrix.length; i++) {\r\n    for (let j = 0; j < matrix[i].length; j++) {\r\n      if (matrix[i][j].status === CellTypes.CELL_NOT_REVEAL) {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n/**\r\n * 修改单元状态\r\n * @param {*} matrix 游戏矩阵\r\n * @param {*} cell 一个单元\r\n * @param {*} level 游戏等级\r\n * @param {*} onContextMenu 是否右键\r\n */\r\nexport const replaceAllCellStatus = (matrix, cell, level, onContextMenu) => {\r\n  const { rowIndex, colIndex, status, isMine, value } = cell\r\n  const nextMatrix = JSON.parse(JSON.stringify(matrix))\r\n  let nextStatus = status\r\n  if (onContextMenu) {\r\n    switch (status) {\r\n      case CellTypes.CELL_NOT_REVEAL:\r\n        nextStatus = CellTypes.CELL_FLAG;\r\n        break;\r\n      case CellTypes.CELL_FLAG:\r\n        nextStatus = CellTypes.CELL_NOT_REVEAL;\r\n        break;\r\n      default: \r\n        break;\r\n    }\r\n  } else {\r\n    if (status === CellTypes.CELL_NOT_REVEAL) {\r\n      // 空单元\r\n      if (!isMine && value === 0) {\r\n        return revealEmptyCell(nextMatrix, cell, level)\r\n      } else if (isMine) {\r\n        // 地雷\r\n        return revealAllCell(nextMatrix)\r\n      } else {\r\n        // 数字\r\n        nextStatus = CellTypes.CELL_NUMBER;\r\n      }\r\n    }\r\n  }\r\n  nextMatrix[rowIndex][colIndex] = {\r\n    rowIndex,\r\n    colIndex,\r\n    status: nextStatus,\r\n    isMine,\r\n    value\r\n  }\r\n  return nextMatrix\r\n}\r\n\r\nconst isNullCell = (cell) => {\r\n  const { status, value, isMine } = cell\r\n  return status === CellTypes.CELL_NOT_REVEAL && value === 0 && !isMine\r\n}\r\n\r\n/**\r\n * 遍历清除当前周围的空单元\r\n * @param {*} matrix 游戏矩阵\r\n * @param {*} cell 一个单元\r\n * @param {*} level 游戏等级\r\n */\r\nexport const revealEmptyCell = (matrix, cell, level) => {\r\n  const around = traverseMatrix(matrix, cell, level);\r\n  around.forEach((block) => {\r\n    const { status, value } = block;\r\n    if (isNullCell(block)) {\r\n      block.status = CellTypes.CELL_NULL;\r\n      revealEmptyCell(matrix, block, level);\r\n    }\r\n    // if (status === CellTypes.CELL_NOT_REVEAL && value === 0 && !isMine) {\r\n    //   block.status = CellTypes.CELL_NULL;\r\n    //   revealEmptyCell(matrix, block, level);\r\n    // }\r\n    if (status === CellTypes.CELL_NOT_REVEAL && value !== 0) {\r\n      block.status = CellTypes.CELL_NUMBER;\r\n    }\r\n  });\r\n  // This cell may not be the matrix's cell, so should set to matrix\r\n  // fix: one monkey surrounded with numbers that cannot be revealed\r\n  // Recursive Function will check cell repeatly...\r\n  if (isNullCell(cell)) {\r\n    const { rowIndex, colIndex } = cell\r\n    cell.status = CellTypes.CELL_NULL;\r\n    matrix[rowIndex][colIndex].status = CellTypes.CELL_NULL\r\n  }\r\n  return matrix;\r\n}\r\n\r\n/**\r\n * 翻开所有的单元\r\n * @param {*} matrix 游戏矩阵\r\n */\r\nexport const revealAllCell = (matrix) => {\r\n  matrix.forEach((row) => {\r\n    row.forEach((cell) => {\r\n      if (cell.isMine) {\r\n        cell.status = CellTypes.CELL_MINE\r\n      } else if (cell.value > 0) {\r\n        cell.status = CellTypes.CELL_NUMBER\r\n      } else if (cell.value === 0) {\r\n        cell.status = CellTypes.CELL_NULL\r\n      }\r\n    })\r\n  })\r\n  return matrix\r\n}","import React from 'react';\r\nexport default class Emoji extends React.Component {\r\n  render () {\r\n    let { content, title, emoji, css, onClick, cursor } = this.props;\r\n    if (emoji) {\r\n      content = emoji.content\r\n      title = emoji.description\r\n    }\r\n    return (\r\n      <span\r\n        className={\"title \" + css}\r\n        style={{cursor: cursor || onClick ? 'pointer': 'default'}}\r\n        role=\"img\"\r\n        aria-label=\"flag\"\r\n        title={ title }\r\n        onClick={ onClick }\r\n      >{ content }</span>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { NumberColors } from '../../constant';\r\nexport default class CellFont extends React.Component {\r\n  renderColorfulContent (content, level) {\r\n    if (!level) {\r\n      level = Number(content)\r\n    }\r\n    switch (level) {\r\n      case 0:\r\n        return NumberColors.MINE_0;\r\n      case 1:\r\n        return NumberColors.MINE_1;\r\n      case 2:\r\n        return NumberColors.MINE_2;\r\n      case 3:\r\n        return NumberColors.MINE_3;\r\n      case 4:\r\n        return NumberColors.MINE_4;\r\n      case 5:\r\n        return NumberColors.MINE_5;\r\n      case 6:\r\n        return NumberColors.MINE_6;\r\n      case 7:\r\n        return NumberColors.MINE_7;\r\n      case 8:\r\n        return NumberColors.MINE_8;\r\n      default:\r\n        return NumberColors.MINE_0;\r\n    }\r\n  }\r\n  render () {\r\n    const { content } = this.props;\r\n    return (\r\n      <span style={{color: this.renderColorfulContent(content), fontWeight: 500}}>\r\n        { content }\r\n      </span>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n// 工具\r\nimport { CellTypes, GameStatus } from '../../constant';\r\nimport { changeMatrix, changeStatus, runFailedMedia, runSuccessMedia } from '../../store/actions';\r\nimport { isSuccess, replaceAllCellStatus } from './helper';\r\nimport { Emojis } from '../../constant';\r\n// 组件\r\nimport Emoji from '../Emoji';\r\nimport CellFont from './CellFont';\r\nclass Cell extends React.Component {\r\n\r\n  renderCellContent (cell) {\r\n    const { status, isMine, value, isEmoji, emoji } = cell\r\n    switch (status) {\r\n      case CellTypes.CELL_NOT_REVEAL:\r\n        return (\r\n          <div className=\"block\"></div>\r\n        );\r\n      case CellTypes.CELL_NULL:\r\n        return (\r\n          <div className=\"revealed-block\">\r\n            <Emoji emoji={ isEmoji ? emoji : Emojis.MONKEY } cursor></Emoji>\r\n          </div>\r\n        );\r\n      case CellTypes.CELL_NUMBER:\r\n        return (\r\n          <div className=\"revealed-block\">\r\n            <CellFont content={ value }/>\r\n          </div>\r\n        );\r\n      case CellTypes.CELL_MINE:\r\n        return (\r\n          <div className=\"revealed-block\">\r\n            {\r\n              isMine ?\r\n              <Emoji emoji={ Emojis.MINE }></Emoji> :\r\n              <Emoji emoji={ Emojis.MONKEY }></Emoji>\r\n            }\r\n          </div>\r\n        );\r\n      case CellTypes.CELL_FLAG:\r\n        return (\r\n          <div className=\"block\">\r\n            <Emoji emoji={ Emojis.FLAG }></Emoji>\r\n          </div>\r\n        );\r\n      default:\r\n        return <div></div>\r\n    }\r\n  }\r\n  // 翻开方块\r\n  _reveal (event) {\r\n    event.preventDefault();\r\n    const { blockRevealed, cell, matrix, level, gameStatus } = this.props;\r\n    blockRevealed(cell, matrix, level, gameStatus);\r\n  }\r\n  // 标记方块\r\n  _flag (event) {\r\n    event.preventDefault();\r\n    const { blockFlagged, cell, matrix, level, gameStatus } = this.props;\r\n    blockFlagged(cell, matrix, level, gameStatus);\r\n  }\r\n\r\n  render () {\r\n    const { cell } = this.props;\r\n    return (\r\n      <div className=\"cell\"\r\n        onClick={ this._reveal.bind(this) } \r\n        onContextMenu={ this._flag.bind(this) }\r\n      >\r\n      {this.renderCellContent(cell)}\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n/* connect Cell到容器中 */\r\n\r\n// 获取所有的状态。映射到props\r\nconst mapStateToProps = (state) => state\r\n\r\n// 处理状态变更的方法。映射到props\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    blockRevealed: (cell, matrix, level, gameStatus) => {\r\n      // 游戏未开始 暂停、胜利、失败；或者当前方块被标记的情况下 不响应左击事件\r\n      // 新增：单元为纯图像不触发左击事件\r\n      if (\r\n        gameStatus === GameStatus.GAME_PAUSED ||\r\n        gameStatus === GameStatus.GAME_SUCCESS ||\r\n        gameStatus === GameStatus.GAME_FAILED ||\r\n        gameStatus === GameStatus.GAME_NOT_START ||\r\n        cell.status === CellTypes.CELL_FLAG ||\r\n        cell.isEmoji\r\n      ) {\r\n        return\r\n      }\r\n      // 若 戏空闲状态 变更为进行中\r\n      if (gameStatus === GameStatus.GAME_NOT_START) {\r\n        dispatch(changeStatus(GameStatus.GAME_ON));\r\n      }\r\n      // 处理cell状态变更。如果是踩雷，翻开所有的方块\r\n      const nextMatrix = replaceAllCellStatus(matrix, cell, level)\r\n      // 踩雷则游戏结束\r\n      if (cell.isMine) {\r\n        dispatch(changeStatus(GameStatus.GAME_FAILED));\r\n        runFailedMedia(dispatch, nextMatrix);\r\n        // 判断游戏是否成功\r\n      } else if (isSuccess(nextMatrix, level)) {\r\n        runSuccessMedia(dispatch, nextMatrix);\r\n        dispatch(changeStatus(GameStatus.GAME_SUCCESS));\r\n      }\r\n      dispatch(changeMatrix(nextMatrix));\r\n    },\r\n    blockFlagged: (cell, matrix, level, gameStatus) => {\r\n      // 游戏未开始，暂停、胜利、失败的情况下 不响应右击事件\r\n      // 新增：单元为纯图像不触发右击事件\r\n      if (\r\n        gameStatus === GameStatus.GAME_PAUSED ||\r\n        gameStatus === GameStatus.GAME_SUCCESS ||\r\n        gameStatus === GameStatus.GAME_FAILED ||\r\n        gameStatus === GameStatus.GAME_NOT_START ||\r\n        cell.isEmoji\r\n      ) {\r\n        return\r\n      }\r\n      // 若 戏空闲状态 变更为进行中\r\n      if (gameStatus === GameStatus.GAME_NOT_START) {\r\n        dispatch(changeStatus(GameStatus.GAME_ON));\r\n      }\r\n      // 处理cell状态变更。\r\n      const nextMatrix = replaceAllCellStatus(matrix, cell, level, true)\r\n      // 游戏成功\r\n      if (isSuccess(nextMatrix, level)) {\r\n        dispatch(changeStatus(GameStatus.GAME_SUCCESS));\r\n      }\r\n      dispatch(changeMatrix(nextMatrix));\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cell)\r\n","import { failedMediaFrame, successMediaFrame } from '../../util';\r\nimport { changeMediaMatrix, changeMediaTimer } from './pure';\r\n\r\n// 播放图像\r\n// 原理\r\n// 1. 利用redux-thunk 分发异步dispath事件\r\n// 2. 设置并维护一个全局的视频控制器timer 该控制器可以在需要的时候用于清除视频\r\n// 3. 循环播放\r\n\r\n/**\r\n * 播放失败视频\r\n * @param {Function} dispatch \r\n * @param {Array} matrix \r\n * @param {Number} time \r\n */\r\nexport function runFailedMedia (dispatch, matrix, time = 40) {\r\n  dispatch(function (dispatch) {\r\n    const len = matrix.length\r\n    let prev = { rowIndex: len - 1, colIndex: 0, isNextLine: false, isPositive: true }\r\n    const timer = setInterval(() => {\r\n      if (!prev.isNextLine) {\r\n        const { rowIndex, colIndex, isPositive } = prev;\r\n        prev = failedMediaFrame(matrix, rowIndex, colIndex, isPositive);\r\n        dispatch(changeMediaMatrix(prev.matrix));\r\n        // 正向转为逆向\r\n        if (isPositive && !prev.isPositive) {\r\n          prev.rowIndex = 0\r\n          prev.colIndex = len - 1\r\n          prev.isNextLine = false\r\n        }\r\n        // 逆向转为正向\r\n        if (!isPositive && prev.isPositive) {\r\n          prev.rowIndex = len - 1\r\n          prev.colIndex = 0\r\n          prev.isNextLine = false\r\n        }\r\n\r\n      } else {\r\n        prev.isNextLine = false\r\n      }\r\n    }, time)\r\n    dispatch(changeMediaTimer(timer))\r\n  })\r\n}\r\n\r\n/**\r\n * 播放成功的视频\r\n * @param {Function} dispatch \r\n * @param {Array} matrix \r\n * @param {Number} time \r\n */\r\nexport function runSuccessMedia (dispatch, matrix, time = 40) {\r\n  dispatch(function (dispatch) {\r\n    const len = matrix.length\r\n    let prev = { rowIndex: len - 1, colIndex: 0, isNextLine: false, isPositive: true }\r\n    const timer = setInterval(() => {\r\n      if (!prev.isNextLine) {\r\n        const { rowIndex, colIndex, isPositive } = prev;\r\n        prev = successMediaFrame(matrix, rowIndex, colIndex, isPositive);\r\n        dispatch(changeMediaMatrix(prev.matrix));\r\n        // 正向转为逆向\r\n        if (isPositive && !prev.isPositive) {\r\n          prev.rowIndex = 0\r\n          prev.colIndex = len - 1\r\n          prev.isNextLine = false\r\n        }\r\n        // 逆向转为正向\r\n        if (!isPositive && prev.isPositive) {\r\n          prev.rowIndex = len - 1\r\n          prev.colIndex = 0\r\n          prev.isNextLine = false\r\n        }\r\n\r\n      } else {\r\n        prev.isNextLine = false\r\n      }\r\n    }, time)\r\n    dispatch(changeMediaTimer(timer))\r\n  })\r\n}\r\n","import React from 'react';\r\nimport Cell from '../Cell';\r\nexport default class Row extends React.Component {\r\n  render () {\r\n    const { row } = this.props;\r\n    return (\r\n      <div className=\"row\">\r\n        {\r\n          row.map((cell, index) => {\r\n            return (\r\n              <Cell cell={ cell } key={ index }></Cell>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Row from '../Row';\r\nclass Matrix extends React.Component {\r\n  render () {\r\n    let { matrix } = this.props;\r\n    const { level, mediaMatrix } = this.props;\r\n    matrix = mediaMatrix || matrix;\r\n    // 基础大小为16px * 2em * 15个 = 480px\r\n    // 由此计算出count为 8 15 16 20时 fontSize分别为30 16 15 12\r\n    return (\r\n      <div className=\"matrix\" style={{fontSize: [30, 16, 15, 12][level] + 'px'}}>\r\n        {\r\n          matrix.map((row, index) => {\r\n            return (\r\n              <Row row={ row } key={ index }></Row>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// 从state中映射matrix到Matrix组件\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    mediaMatrix: state.mediaMatrix,\r\n    matrix: state.matrix,\r\n    level: state.level\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Matrix)\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Emojis, ClockStatus, GameStatus } from '../../constant';\r\n// 组件\r\nimport Emoji from '../Emoji';\r\nclass Clock extends React.Component {\r\n  timer;\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      time: 0\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this.timer = setInterval (() => {\r\n      const { clockStatus } = this.props;\r\n      if (clockStatus === ClockStatus.CONTINUE) {\r\n        this.setState({time: this.state.time + 1})\r\n      }\r\n    }, 1000)\r\n  }\r\n  componentWillUnmount () {\r\n    if (this.timer) {\r\n      clearInterval(this.timer)\r\n    }\r\n  }\r\n\r\n  resetClock(time = 0) {\r\n    this.setState({ time })\r\n  }\r\n\r\n  render () {\r\n    const { time } = this.state;\r\n    return (\r\n      <div className=\"line\">\r\n        <Emoji emoji={ Emojis.INFO_CLOCK }></Emoji>\r\n        <span>{ time } s</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n/* connect */\r\n\r\nconst mapStateToProps = (state) => {\r\n  const status = state.gameStatus\r\n  let clockStatus = 0\r\n  switch (status) {\r\n    case (GameStatus.GAME_CONTINUED):\r\n    case (GameStatus.GAME_ON):\r\n      clockStatus = 1;\r\n      break;\r\n    default:\r\n      clockStatus = 0;\r\n  }\r\n  return { clockStatus }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, null, null, { forwardRef: true })(Clock);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n// 工具\r\nimport { changeLevel, initMatrix, changeStatus, changeAnimationStatus, changeMediaTimer, changeMediaMatrix } from '../../store/actions';\r\nimport { mapLevel, GameStatus, Emojis } from '../../constant';\r\n// 组件\r\nimport Emoji from '../Emoji';\r\nimport Clock from '../Clock';\r\n\r\nclass Info extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.refClock = React.createRef();\r\n  }\r\n  // 【等级变更】响应\r\n  _levelChangeEvent (event) {\r\n    event.preventDefault();\r\n    const { levelChange, mediaTimer } = this.props;\r\n    levelChange(event, mediaTimer);\r\n  }\r\n\r\n  _levelClickEvent (event) {\r\n    event.preventDefault();\r\n    const { level, levelChange, mediaTimer } = this.props;\r\n    let value = level + 1\r\n    value = value > 3 ? 0 : value\r\n    levelChange({ target: { value }}, mediaTimer)\r\n  }\r\n\r\n  // 【重新开始】响应\r\n  _restart (event) {\r\n    event.preventDefault();\r\n    const { restart, level, mediaTimer } = this.props;\r\n    restart(level, mediaTimer);\r\n    this.refClock.current.resetClock(0);\r\n  }\r\n  // 【暂停】响应\r\n  _pause (event) {\r\n    event.preventDefault();\r\n    const { gameStatus, pause } = this.props;\r\n    pause(gameStatus);\r\n  }\r\n  // 确定是否使用动画\r\n  _toggleAnimation (event) {\r\n    event.preventDefault();\r\n    const { toggleAnimation, animationStatus } = this.props;\r\n    toggleAnimation(animationStatus);\r\n  }\r\n\r\n  // 渲染游戏状态\r\n  renderGameStatus (gameStatus) {\r\n    switch (gameStatus) {\r\n      case GameStatus.GAME_NOT_START:\r\n        return Emojis.GAME_IDLE;\r\n      case GameStatus.GAME_PAUSED:\r\n        return Emojis.GAME_PAUSED;\r\n      case GameStatus.GAME_FAILED:\r\n        return Emojis.GAME_FAILED;\r\n      case GameStatus.GAME_SUCCESS:\r\n        return Emojis.GAME_SUCCESS;\r\n      case GameStatus.GAME_ON:\r\n      case GameStatus.GAME_CONTINUED:\r\n      default:\r\n        return Emojis.GAME_PLAYING;\r\n    }\r\n  }\r\n\r\n  // 渲染按钮文字\r\n  renderPauseButtonContent (status) {\r\n    switch (status) {\r\n      case GameStatus.GAME_PAUSED:\r\n        return 'Continue';\r\n      default:\r\n        return 'Pause';\r\n    }\r\n  }\r\n\r\n  // 渲染背景动画\r\n  renderAnimationButtonContent (status) {\r\n    if (status) {\r\n      return 'Static'\r\n    } else {\r\n      return 'Dynamic'\r\n    }\r\n  }\r\n\r\n  // 渲染开始按钮\r\n  renderRestartButtonContent (status) {\r\n    if (status === GameStatus.GAME_NOT_START) {\r\n      return 'Start'\r\n    } else {\r\n      return 'Restart'\r\n    }\r\n  }\r\n\r\n  // 渲染等级emoji\r\n  renderLevelEmoji (level) {\r\n    return [Emojis.GAME_EASY, Emojis.GAME_MEDIUM, Emojis.GAME_HARD, Emojis.GAME_SUPER][level];\r\n  }\r\n\r\n  render() {\r\n    const { level, gameStatus, mine, animationStatus } = this.props\r\n    return (\r\n      <div className=\"info\">\r\n        {\r\n          /* \r\n          去除这个select框 用点击emoji代替\r\n          <div className=\"line\">\r\n            <Emoji emoji={ Emojis.INFO_LEVEL_CHOICE }></Emoji>\r\n            <select name=\"levelSelector\" value={level} onChange={ this._levelChangeEvent.bind(this) }>\r\n              <option className=\"option\" value=\"0\">{ Emojis.GAME_EASY.content }</option>\r\n              <option className=\"option\" value=\"1\">{ Emojis.GAME_MEDIUM.content }</option>\r\n              <option className=\"option\" value=\"2\">{ Emojis.GAME_HARD.content }</option>\r\n              <option className=\"option\" value=\"3\">{ Emojis.GAME_SUPER.content }</option>\r\n            </select>\r\n          </div> \r\n          */\r\n        }\r\n        <div className=\"line\">\r\n          <Emoji emoji={ Emojis.INFO_LEVEL }></Emoji>\r\n          <Emoji emoji={ this.renderLevelEmoji(level)} onClick={ this._levelClickEvent.bind(this) } css=\"content-right\"></Emoji>\r\n        </div>\r\n        { \r\n          <React.Fragment>\r\n            <div className=\"line\">\r\n              <Emoji emoji={ Emojis.INFO_GAME_BLOCK }></Emoji>\r\n              <span>{ mine.notRevealed }</span>\r\n            </div>\r\n            <div className=\"line\">\r\n              <Emoji emoji={ Emojis.FLAG }></Emoji>\r\n              <span>{ mine.flagged }</span>\r\n            </div>\r\n            <div className=\"line\">\r\n              <Emoji emoji={ Emojis.MINE }></Emoji>\r\n              <span>{ mapLevel[level].mineCount }</span>\r\n            </div>\r\n          </React.Fragment>\r\n        }\r\n        <div className=\"line\">\r\n          <Emoji emoji={ Emojis.INFO_GAME_STATUS }></Emoji>\r\n          { <Emoji emoji={ this.renderGameStatus(gameStatus) } css=\"content-right\"></Emoji> }\r\n        </div>\r\n        <Clock ref={this.refClock}/>\r\n        <div className=\"line\">\r\n          <button className=\"animation\" onClick={ this._toggleAnimation.bind(this) }>{ this.renderAnimationButtonContent(animationStatus) }</button>\r\n          <button className=\"pause\" onClick={ this._pause.bind(this) }>{ this.renderPauseButtonContent(gameStatus) }</button>\r\n          <button className=\"restart\" onClick={ this._restart.bind(this) }>{ this.renderRestartButtonContent(gameStatus) }</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return state\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    levelChange: ({ target }, mediaTimer) => {\r\n      const level = Number(target.value)\r\n      // 关闭视频\r\n      clearInterval(mediaTimer)\r\n      dispatch(changeMediaTimer(null))\r\n      dispatch(changeMediaMatrix(null))\r\n      // 修改游戏难度\r\n      dispatch(changeLevel(level));\r\n      // 初始化游戏矩阵\r\n      dispatch(initMatrix(level));\r\n      // 修改游戏状态\r\n      dispatch(changeStatus(GameStatus.GAME_NOT_START));\r\n    },\r\n    restart: (level, mediaTimer) => {\r\n      // 关闭视频\r\n      clearInterval(mediaTimer)\r\n      dispatch(changeMediaTimer(null))\r\n      dispatch(changeMediaMatrix(null))\r\n      // 重置矩阵\r\n      dispatch(initMatrix(level));\r\n      // 重置游戏状态\r\n      dispatch(changeStatus(GameStatus.GAME_ON));\r\n    },\r\n    pause: (gameStatus) => {\r\n      if (gameStatus === GameStatus.GAME_PAUSED) {\r\n        dispatch(changeStatus(GameStatus.GAME_CONTINUED))\r\n      }\r\n      if (\r\n        gameStatus === GameStatus.GAME_CONTINUED ||\r\n        gameStatus === GameStatus.GAME_ON\r\n      ) {\r\n        dispatch(changeStatus(GameStatus.GAME_PAUSED))\r\n      }\r\n    },\r\n    toggleAnimation: (animation) => {\r\n      dispatch(changeAnimationStatus(!animation))\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Info)","import React from 'react';\r\nimport { Emojis } from '../../constant';\r\nimport Emoji from '../Emoji';\r\nexport default class Description extends React.Component {\r\n  render () {\r\n    return (\r\n      <section>\r\n        <div className=\"title\">\r\n          <span>Description:</span>\r\n        </div>\r\n        <div className=\"simple-description\">\r\n          <span>Minesweeper is a classic windows game,</span>\r\n          <span>I moved it to the browser,</span>\r\n          <span>I wish you will feel relax after a day work with it.</span>\r\n        </div>\r\n        <div className=\"content\">\r\n          <div className=\"line\">\r\n            <span>* </span>\r\n            <span>Click </span>\r\n            <Emoji emoji={ Emojis.GAME_MEDIUM } />\r\n            <span> can change the degree of difficulty.</span>\r\n          </div>\r\n          <div className=\"line\">\r\n            <span>* </span>\r\n            <span>Click </span>\r\n            <span className=\"pink\">Static</span>\r\n            <span> to toggle background between `static` and `dynamic`</span>\r\n          </div>\r\n          <div className=\"line\">\r\n            <span>* </span>\r\n            <span>Click </span>\r\n            <span className=\"cyan\">Pause</span>\r\n            <span> to stop/continue your Game</span>\r\n          </div>\r\n          <div className=\"line\">\r\n            <span>* </span>\r\n            <span>Click </span>\r\n            <span className=\"green\">Start</span>\r\n            <span> to start your game.</span>\r\n          </div>\r\n          <div className=\"line\">\r\n            <span>* Left mouse click: reveal one cell.</span>\r\n          </div>\r\n          <div className=\"line\">\r\n            <span>* Right mouse click: mark one cell if you think it is a mine.</span>\r\n          </div>\r\n          <div className=\"line\">\r\n            <span>* </span>\r\n            <Emoji emoji={ Emojis.INFO_NUMBER }></Emoji>\r\n            <span> : means there are `n` mines surround it.</span>\r\n          </div>\r\n          <div className=\"line\">\r\n            <span>* </span>\r\n            <Emoji emoji={ Emojis.MONKEY }></Emoji>\r\n            <span> : means safe area.</span>\r\n          </div>\r\n          <div className=\"line\">\r\n            <span>* </span>\r\n            <Emoji emoji={ Emojis.INFO_LEVEL }></Emoji>\r\n            <span> : means current `level` of your game.Simple, Medium, Hard, Super is supplied.</span>\r\n          </div>\r\n          <div className=\"line\">\r\n            <span>* </span>\r\n            <Emoji emoji={ Emojis.INFO_GAME_BLOCK }></Emoji>\r\n            <span> : means total `n` cells is supplied.</span>\r\n          </div>\r\n          <div className=\"line\">\r\n            <span>* </span>\r\n            <Emoji emoji={ Emojis.FLAG }></Emoji>\r\n            <span> : means `n` flag is used.</span>\r\n          </div>\r\n          <div className=\"line\">\r\n            <span>* </span>\r\n            <Emoji emoji={ Emojis.MINE }></Emoji>\r\n            <span> : means total `n` mines under the cells.</span>\r\n          </div>\r\n          <div className=\"line\">\r\n            <span>* </span>\r\n            <Emoji emoji={ Emojis.INFO_GAME_STATUS }></Emoji>\r\n            <span> : shows current game status.</span>\r\n          </div>\r\n          <div className=\"line\">\r\n            <span>* </span>\r\n            <Emoji emoji={ Emojis.INFO_CLOCK }></Emoji>\r\n            <span> : shows how much time you used to `sweep it`!</span>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport Matrix from '../Matrix';\r\nimport Info from '../Info';\r\nimport Description from '../Description';\r\nexport default class Board extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className=\"board\">\r\n        <Info></Info>\r\n        <div className=\"zone\">\r\n          <Matrix />\r\n        </div>\r\n        <Description />\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.scss';\r\nimport { Animations } from './constant';\r\nimport Board from './components/Board';\r\nclass App extends React.Component {\r\n  render() {\r\n    const { animationStatus } = this.props;\r\n    const index = animationStatus ? 1 : 0;\r\n    return (\r\n      <div className=\"app\" style={ Animations[index] }>\r\n        <h1>Minesweeper: Sweep it, Bro!</h1>\r\n        <div className=\"boardArea\">\r\n          <Board></Board>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n/* connect */\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    animationStatus: state.animationStatus\r\n  }\r\n}\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     displayRandomMedia: (level = 3, time = 1000) => {\r\n//       return setInterval(() => {\r\n//         dispatch(changeMediaMatrix(randomMediaFrame(level)));\r\n//       }, time)\r\n//     },\r\n//     displayFailedMedia: (matrix, time = 1000) => {\r\n//       dispatch(function (dispatch) {\r\n//         let prev = { i: 0, j: 0 }\r\n//         const timer =setInterval(() => {\r\n//           const { i, j } = prev;\r\n//           prev = failedMediaFrame(matrix, i, j);\r\n//           dispatch(changeMediaMatrix(prev.matrix));\r\n//           if (i > matrix.length - 1 && j > matrix.length - 1) {\r\n//             clearInterval(timer)\r\n//           }\r\n//         }, time)\r\n//       });\r\n//     },\r\n//     displaySuccessMedia: (level = 3, time = 1000) => {\r\n//       return setInterval(() => {\r\n//         dispatch(changeMediaMatrix(randomMediaFrame(level)));\r\n//       }, time)\r\n//     },\r\n//     displayPausedMedia: (level = 3, time = 1000) => {\r\n//       return setInterval(() => {\r\n//         dispatch(changeMediaMatrix(randomMediaFrame(level)));\r\n//       }, time)\r\n//     },\r\n//     clearMedia: (timer, mediaMatrix) => {\r\n//       if (timer) {\r\n//         clearInterval(timer)\r\n//         if (mediaMatrix) {\r\n//           dispatch(changeMediaMatrix(null));\r\n//         }\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\nexport default connect(mapStateToProps)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport reducers from './store/reducers';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = createStore(reducers, applyMiddleware(logger, thunk))\r\n\r\nReactDOM.render(\r\n  <Provider store={ store }>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}